
mainBuild_V3.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d1c  08006d1c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          00000248  20000040  20000040  00020040  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f89  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002963  00000000  00000000  00032ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00035958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e93  00000000  00000000  000378d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148cf  00000000  00000000  0005976b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce7bf  00000000  00000000  0006e03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c7f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004708  00000000  00000000  0013c84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080068e0 	.word	0x080068e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	080068e0 	.word	0x080068e0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <write_register+0x34>)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <write_register+0x34>)
 8000b44:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <write_register+0x34>)
 8000b4e:	2194      	movs	r1, #148	; 0x94
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <write_register+0x38>)
 8000b52:	f002 faf1 	bl	8003138 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000005c 	.word	0x2000005c
 8000b64:	20000060 	.word	0x20000060

08000b68 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <read_register+0x3c>)
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <read_register+0x3c>)
 8000b82:	2194      	movs	r1, #148	; 0x94
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <read_register+0x40>)
 8000b86:	f002 fad7 	bl	8003138 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	2194      	movs	r1, #148	; 0x94
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <read_register+0x40>)
 8000b96:	f002 fbcd 	bl	8003334 <HAL_I2C_Master_Receive>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000005c 	.word	0x2000005c
 8000ba8:	20000060 	.word	0x20000060

08000bac <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000bac:	b084      	sub	sp, #16
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	f107 0c08 	add.w	ip, r7, #8
 8000bb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000bba:	4b81      	ldr	r3, [pc, #516]	; (8000dc0 <CS43_Init+0x214>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000bc2:	4b7f      	ldr	r3, [pc, #508]	; (8000dc0 <CS43_Init+0x214>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69da      	ldr	r2, [r3, #28]
 8000bc8:	4b7d      	ldr	r3, [pc, #500]	; (8000dc0 <CS43_Init+0x214>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bd0:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	487b      	ldr	r0, [pc, #492]	; (8000dc4 <CS43_Init+0x218>)
 8000bd8:	f002 f950 	bl	8002e7c <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000bdc:	4b7a      	ldr	r3, [pc, #488]	; (8000dc8 <CS43_Init+0x21c>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2254      	movs	r2, #84	; 0x54
 8000be6:	4619      	mov	r1, r3
 8000be8:	f005 f8e4 	bl	8005db4 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000bec:	4b77      	ldr	r3, [pc, #476]	; (8000dcc <CS43_Init+0x220>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000bf2:	4976      	ldr	r1, [pc, #472]	; (8000dcc <CS43_Init+0x220>)
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff ff99 	bl	8000b2c <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000bfa:	4b74      	ldr	r3, [pc, #464]	; (8000dcc <CS43_Init+0x220>)
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000c00:	4b72      	ldr	r3, [pc, #456]	; (8000dcc <CS43_Init+0x220>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b70      	ldr	r3, [pc, #448]	; (8000dcc <CS43_Init+0x220>)
 8000c0c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000c0e:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <CS43_Init+0x220>)
 8000c10:	785b      	ldrb	r3, [r3, #1]
 8000c12:	f043 030c 	orr.w	r3, r3, #12
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b6c      	ldr	r3, [pc, #432]	; (8000dcc <CS43_Init+0x220>)
 8000c1a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000c1c:	4b6b      	ldr	r3, [pc, #428]	; (8000dcc <CS43_Init+0x220>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <CS43_Init+0x220>)
 8000c28:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000c2a:	4969      	ldr	r1, [pc, #420]	; (8000dd0 <CS43_Init+0x224>)
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff ff7d 	bl	8000b2c <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000c32:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <CS43_Init+0x220>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000c38:	4965      	ldr	r1, [pc, #404]	; (8000dd0 <CS43_Init+0x224>)
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f7ff ff76 	bl	8000b2c <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000c40:	4962      	ldr	r1, [pc, #392]	; (8000dcc <CS43_Init+0x220>)
 8000c42:	2006      	movs	r0, #6
 8000c44:	f7ff ff90 	bl	8000b68 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000c48:	4b60      	ldr	r3, [pc, #384]	; (8000dcc <CS43_Init+0x220>)
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <CS43_Init+0x220>)
 8000c54:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000c56:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <CS43_Init+0x220>)
 8000c58:	785b      	ldrb	r3, [r3, #1]
 8000c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <CS43_Init+0x220>)
 8000c62:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000c64:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <CS43_Init+0x220>)
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <CS43_Init+0x220>)
 8000c70:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000c72:	4b56      	ldr	r3, [pc, #344]	; (8000dcc <CS43_Init+0x220>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	f023 0310 	bic.w	r3, r3, #16
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <CS43_Init+0x220>)
 8000c7e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000c80:	4b52      	ldr	r3, [pc, #328]	; (8000dcc <CS43_Init+0x220>)
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	f023 0304 	bic.w	r3, r3, #4
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <CS43_Init+0x220>)
 8000c8c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000c8e:	4b4f      	ldr	r3, [pc, #316]	; (8000dcc <CS43_Init+0x220>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <CS43_Init+0x220>)
 8000c9a:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <CS43_Init+0x220>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	f043 0303 	orr.w	r3, r3, #3
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <CS43_Init+0x220>)
 8000ca8:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000caa:	4949      	ldr	r1, [pc, #292]	; (8000dd0 <CS43_Init+0x224>)
 8000cac:	2006      	movs	r0, #6
 8000cae:	f7ff ff3d 	bl	8000b2c <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000cb2:	4947      	ldr	r1, [pc, #284]	; (8000dd0 <CS43_Init+0x224>)
 8000cb4:	2008      	movs	r0, #8
 8000cb6:	f7ff ff57 	bl	8000b68 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <CS43_Init+0x220>)
 8000cbc:	785b      	ldrb	r3, [r3, #1]
 8000cbe:	f023 030f 	bic.w	r3, r3, #15
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <CS43_Init+0x220>)
 8000cc6:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <CS43_Init+0x220>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <CS43_Init+0x220>)
 8000cd4:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000cd6:	493e      	ldr	r1, [pc, #248]	; (8000dd0 <CS43_Init+0x224>)
 8000cd8:	2008      	movs	r0, #8
 8000cda:	f7ff ff27 	bl	8000b2c <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000cde:	493c      	ldr	r1, [pc, #240]	; (8000dd0 <CS43_Init+0x224>)
 8000ce0:	2009      	movs	r0, #9
 8000ce2:	f7ff ff41 	bl	8000b68 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000ce6:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <CS43_Init+0x220>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	f023 030f 	bic.w	r3, r3, #15
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <CS43_Init+0x220>)
 8000cf2:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <CS43_Init+0x220>)
 8000cf6:	785b      	ldrb	r3, [r3, #1]
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <CS43_Init+0x220>)
 8000d00:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000d02:	4933      	ldr	r1, [pc, #204]	; (8000dd0 <CS43_Init+0x224>)
 8000d04:	2009      	movs	r0, #9
 8000d06:	f7ff ff11 	bl	8000b2c <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000d0a:	4931      	ldr	r1, [pc, #196]	; (8000dd0 <CS43_Init+0x224>)
 8000d0c:	200e      	movs	r0, #14
 8000d0e:	f7ff ff2b 	bl	8000b68 <read_register>
	if(outputMode == MODE_ANALOG_CS43)
 8000d12:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d123      	bne.n	8000d62 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <CS43_Init+0x220>)
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <CS43_Init+0x220>)
 8000d26:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <CS43_Init+0x220>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <CS43_Init+0x220>)
 8000d34:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <CS43_Init+0x220>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	f023 0320 	bic.w	r3, r3, #32
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <CS43_Init+0x220>)
 8000d42:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <CS43_Init+0x220>)
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	f023 0310 	bic.w	r3, r3, #16
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <CS43_Init+0x220>)
 8000d50:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <CS43_Init+0x220>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	f023 0308 	bic.w	r3, r3, #8
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <CS43_Init+0x220>)
 8000d5e:	705a      	strb	r2, [r3, #1]
 8000d60:	e006      	b.n	8000d70 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000d62:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <CS43_Init+0x220>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000d70:	4917      	ldr	r1, [pc, #92]	; (8000dd0 <CS43_Init+0x224>)
 8000d72:	200e      	movs	r0, #14
 8000d74:	f7ff feda 	bl	8000b2c <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000d78:	4915      	ldr	r1, [pc, #84]	; (8000dd0 <CS43_Init+0x224>)
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f7ff fef4 	bl	8000b68 <read_register>
	iData[1] = 0x00;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <CS43_Init+0x220>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000d86:	4912      	ldr	r1, [pc, #72]	; (8000dd0 <CS43_Init+0x224>)
 8000d88:	200f      	movs	r0, #15
 8000d8a:	f7ff fecf 	bl	8000b2c <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <CS43_Init+0x220>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000d94:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <CS43_Init+0x224>)
 8000d96:	2014      	movs	r0, #20
 8000d98:	f7ff fec8 	bl	8000b2c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <CS43_Init+0x224>)
 8000d9e:	2015      	movs	r0, #21
 8000da0:	f7ff fec4 	bl	8000b2c <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000da4:	490a      	ldr	r1, [pc, #40]	; (8000dd0 <CS43_Init+0x224>)
 8000da6:	201a      	movs	r0, #26
 8000da8:	f7ff fec0 	bl	8000b2c <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000dac:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <CS43_Init+0x224>)
 8000dae:	201b      	movs	r0, #27
 8000db0:	f7ff febc 	bl	8000b2c <write_register>
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr
 8000dc0:	20000230 	.word	0x20000230
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	20000060 	.word	0x20000060
 8000dcc:	2000005c 	.word	0x2000005c
 8000dd0:	2000005d 	.word	0x2000005d

08000dd4 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d837      	bhi.n	8000e54 <CS43_Enable_RightLeft+0x80>
 8000de4:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <CS43_Enable_RightLeft+0x18>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000dfd 	.word	0x08000dfd
 8000df0:	08000e13 	.word	0x08000e13
 8000df4:	08000e29 	.word	0x08000e29
 8000df8:	08000e3f 	.word	0x08000e3f
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000dfe:	22c0      	movs	r2, #192	; 0xc0
 8000e00:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e0e:	705a      	strb	r2, [r3, #1]
			break;
 8000e10:	e021      	b.n	8000e56 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e24:	705a      	strb	r2, [r3, #1]
			break;
 8000e26:	e016      	b.n	8000e56 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e2a:	22c0      	movs	r2, #192	; 0xc0
 8000e2c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e3a:	705a      	strb	r2, [r3, #1]
			break;
 8000e3c:	e00b      	b.n	8000e56 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e50:	705a      	strb	r2, [r3, #1]
			break;
 8000e52:	e000      	b.n	8000e56 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8000e54:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e58:	785b      	ldrb	r3, [r3, #1]
 8000e5a:	f043 030c 	orr.w	r3, r3, #12
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e62:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e66:	785b      	ldrb	r3, [r3, #1]
 8000e68:	f043 0303 	orr.w	r3, r3, #3
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <CS43_Enable_RightLeft+0xb0>)
 8000e70:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000e72:	4905      	ldr	r1, [pc, #20]	; (8000e88 <CS43_Enable_RightLeft+0xb4>)
 8000e74:	2004      	movs	r0, #4
 8000e76:	f7ff fe59 	bl	8000b2c <write_register>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000005c 	.word	0x2000005c
 8000e88:	2000005d 	.word	0x2000005d

08000e8c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	3b32      	subs	r3, #50	; 0x32
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <CS43_SetVolume+0x78>)
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000eb0:	4915      	ldr	r1, [pc, #84]	; (8000f08 <CS43_SetVolume+0x7c>)
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f7ff fe3a 	bl	8000b2c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000eb8:	4913      	ldr	r1, [pc, #76]	; (8000f08 <CS43_SetVolume+0x7c>)
 8000eba:	2015      	movs	r0, #21
 8000ebc:	f7ff fe36 	bl	8000b2c <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d80e      	bhi.n	8000ee4 <CS43_SetVolume+0x58>
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <CS43_SetVolume+0x80>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1152      	asrs	r2, r2, #5
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3b18      	subs	r3, #24
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	e000      	b.n	8000ee6 <CS43_SetVolume+0x5a>
 8000ee4:	2318      	movs	r3, #24
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <CS43_SetVolume+0x78>)
 8000ee8:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000eea:	4907      	ldr	r1, [pc, #28]	; (8000f08 <CS43_SetVolume+0x7c>)
 8000eec:	2020      	movs	r0, #32
 8000eee:	f7ff fe1d 	bl	8000b2c <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000ef2:	4905      	ldr	r1, [pc, #20]	; (8000f08 <CS43_SetVolume+0x7c>)
 8000ef4:	2021      	movs	r0, #33	; 0x21
 8000ef6:	f7ff fe19 	bl	8000b2c <write_register>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000005c 	.word	0x2000005c
 8000f08:	2000005d 	.word	0x2000005d
 8000f0c:	51eb851f 	.word	0x51eb851f

08000f10 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <CS43_Start+0x7c>)
 8000f16:	2299      	movs	r2, #153	; 0x99
 8000f18:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000f1a:	491d      	ldr	r1, [pc, #116]	; (8000f90 <CS43_Start+0x80>)
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fe05 	bl	8000b2c <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <CS43_Start+0x7c>)
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8000f28:	4919      	ldr	r1, [pc, #100]	; (8000f90 <CS43_Start+0x80>)
 8000f2a:	2047      	movs	r0, #71	; 0x47
 8000f2c:	f7ff fdfe 	bl	8000b2c <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000f30:	4917      	ldr	r1, [pc, #92]	; (8000f90 <CS43_Start+0x80>)
 8000f32:	2032      	movs	r0, #50	; 0x32
 8000f34:	f7ff fe18 	bl	8000b68 <read_register>
	iData[1] |= 0x80;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <CS43_Start+0x7c>)
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <CS43_Start+0x7c>)
 8000f44:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000f46:	4912      	ldr	r1, [pc, #72]	; (8000f90 <CS43_Start+0x80>)
 8000f48:	2032      	movs	r0, #50	; 0x32
 8000f4a:	f7ff fdef 	bl	8000b2c <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000f4e:	4910      	ldr	r1, [pc, #64]	; (8000f90 <CS43_Start+0x80>)
 8000f50:	2032      	movs	r0, #50	; 0x32
 8000f52:	f7ff fe09 	bl	8000b68 <read_register>
	iData[1] &= ~(0x80);
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <CS43_Start+0x7c>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <CS43_Start+0x7c>)
 8000f62:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000f64:	490a      	ldr	r1, [pc, #40]	; (8000f90 <CS43_Start+0x80>)
 8000f66:	2032      	movs	r0, #50	; 0x32
 8000f68:	f7ff fde0 	bl	8000b2c <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <CS43_Start+0x7c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000f72:	4907      	ldr	r1, [pc, #28]	; (8000f90 <CS43_Start+0x80>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fdd9 	bl	8000b2c <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <CS43_Start+0x7c>)
 8000f7c:	229e      	movs	r2, #158	; 0x9e
 8000f7e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000f80:	4903      	ldr	r1, [pc, #12]	; (8000f90 <CS43_Start+0x80>)
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff fdd2 	bl	8000b2c <write_register>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000005c 	.word	0x2000005c
 8000f90:	2000005d 	.word	0x2000005d

08000f94 <initKeyPad>:
		HAL_GPIO_WritePin(row_ports[i],row_pins[i],GPIO_PIN_SET);
	}


}*/
void initKeyPad(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	for (int i =0;i<4;i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e00e      	b.n	8000fbe <initKeyPad+0x2a>
		{
			HAL_GPIO_WritePin(row_ports[i],row_pins[i],GPIO_PIN_SET);
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <initKeyPad+0x3c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <initKeyPad+0x40>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f001 ff62 	bl	8002e7c <HAL_GPIO_WritePin>
	for (int i =0;i<4;i++)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	dded      	ble.n	8000fa0 <initKeyPad+0xc>
		}
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000020 	.word	0x20000020

08000fd8 <readKeyPad>:
char readKeyPad()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
	char key_default = 111;
 8000fde:	236f      	movs	r3, #111	; 0x6f
 8000fe0:	71fb      	strb	r3, [r7, #7]
	for (int i =0;i<4;i++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e03b      	b.n	8001060 <readKeyPad+0x88>
		for (int j =0;j<4;j++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	e01f      	b.n	800102e <readKeyPad+0x56>
			if (i==j)
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d10c      	bne.n	8001010 <readKeyPad+0x38>
				HAL_GPIO_WritePin(row_ports[i],row_pins[i],GPIO_PIN_RESET);
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <readKeyPad+0xa0>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <readKeyPad+0xa4>)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	f001 ff37 	bl	8002e7c <HAL_GPIO_WritePin>
 800100e:	e00b      	b.n	8001028 <readKeyPad+0x50>

			else{
				HAL_GPIO_WritePin(row_ports[j],row_pins[j],GPIO_PIN_SET);
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <readKeyPad+0xa0>)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <readKeyPad+0xa4>)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	f001 ff2a 	bl	8002e7c <HAL_GPIO_WritePin>
		for (int j =0;j<4;j++){
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b03      	cmp	r3, #3
 8001032:	dddc      	ble.n	8000fee <readKeyPad+0x16>
			}
		}

		char key_pressed = getKeyPad();
 8001034:	f000 f824 	bl	8001080 <getKeyPad>
 8001038:	4603      	mov	r3, r0
 800103a:	71bb      	strb	r3, [r7, #6]
		if (key_pressed !=111){
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	2b6f      	cmp	r3, #111	; 0x6f
 8001040:	d00b      	beq.n	800105a <readKeyPad+0x82>
			return interfaceValueKey(key_pressed+4*i);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	b2da      	uxtb	r2, r3
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	4413      	add	r3, r2
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f83f 	bl	80010d4 <interfaceValueKey>
 8001056:	4603      	mov	r3, r0
 8001058:	e00a      	b.n	8001070 <readKeyPad+0x98>
	for (int i =0;i<4;i++){
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b03      	cmp	r3, #3
 8001064:	ddc0      	ble.n	8000fe8 <readKeyPad+0x10>
		}
	}
	return interfaceValueKey(key_default);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f833 	bl	80010d4 <interfaceValueKey>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000020 	.word	0x20000020

08001080 <getKeyPad>:

char getKeyPad(){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	char key_default = 111;
 8001086:	236f      	movs	r3, #111	; 0x6f
 8001088:	70fb      	strb	r3, [r7, #3]
		for (int i =0;i<4;i++){
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	e014      	b.n	80010ba <getKeyPad+0x3a>
			if (HAL_GPIO_ReadPin(col_ports[i],col_pins[i]) == GPIO_PIN_RESET)
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <getKeyPad+0x4c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001098:	490d      	ldr	r1, [pc, #52]	; (80010d0 <getKeyPad+0x50>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f001 fed2 	bl	8002e4c <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <getKeyPad+0x34>
				return (char)i;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	e006      	b.n	80010c2 <getKeyPad+0x42>
		for (int i =0;i<4;i++){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3301      	adds	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	dde7      	ble.n	8001090 <getKeyPad+0x10>
		}
	return key_default;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000010 	.word	0x20000010
 80010d0:	20000028 	.word	0x20000028

080010d4 <interfaceValueKey>:

char interfaceValueKey(char value_pressed){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]

	switch (value_pressed){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d843      	bhi.n	800116c <interfaceValueKey+0x98>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <interfaceValueKey+0x18>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	0800112d 	.word	0x0800112d
 80010f0:	08001131 	.word	0x08001131
 80010f4:	08001135 	.word	0x08001135
 80010f8:	08001139 	.word	0x08001139
 80010fc:	0800113d 	.word	0x0800113d
 8001100:	08001141 	.word	0x08001141
 8001104:	08001145 	.word	0x08001145
 8001108:	08001149 	.word	0x08001149
 800110c:	0800114d 	.word	0x0800114d
 8001110:	08001151 	.word	0x08001151
 8001114:	08001155 	.word	0x08001155
 8001118:	08001159 	.word	0x08001159
 800111c:	0800115d 	.word	0x0800115d
 8001120:	08001161 	.word	0x08001161
 8001124:	08001165 	.word	0x08001165
 8001128:	08001169 	.word	0x08001169
	case 0: return 49; break;
 800112c:	2331      	movs	r3, #49	; 0x31
 800112e:	e01e      	b.n	800116e <interfaceValueKey+0x9a>
	case 1: return 50; break;
 8001130:	2332      	movs	r3, #50	; 0x32
 8001132:	e01c      	b.n	800116e <interfaceValueKey+0x9a>
	case 2: return 51; break;
 8001134:	2333      	movs	r3, #51	; 0x33
 8001136:	e01a      	b.n	800116e <interfaceValueKey+0x9a>
	case 3: return 65; break;
 8001138:	2341      	movs	r3, #65	; 0x41
 800113a:	e018      	b.n	800116e <interfaceValueKey+0x9a>
	case 4: return 52; break;
 800113c:	2334      	movs	r3, #52	; 0x34
 800113e:	e016      	b.n	800116e <interfaceValueKey+0x9a>
	case 5: return 53; break;
 8001140:	2335      	movs	r3, #53	; 0x35
 8001142:	e014      	b.n	800116e <interfaceValueKey+0x9a>
	case 6: return 54; break;
 8001144:	2336      	movs	r3, #54	; 0x36
 8001146:	e012      	b.n	800116e <interfaceValueKey+0x9a>
	case 7: return 66; break;
 8001148:	2342      	movs	r3, #66	; 0x42
 800114a:	e010      	b.n	800116e <interfaceValueKey+0x9a>
	case 8: return 55; break;
 800114c:	2337      	movs	r3, #55	; 0x37
 800114e:	e00e      	b.n	800116e <interfaceValueKey+0x9a>
	case 9: return 56; break;
 8001150:	2338      	movs	r3, #56	; 0x38
 8001152:	e00c      	b.n	800116e <interfaceValueKey+0x9a>
	case 10: return 57; break;
 8001154:	2339      	movs	r3, #57	; 0x39
 8001156:	e00a      	b.n	800116e <interfaceValueKey+0x9a>
	case 11: return 67; break;
 8001158:	2343      	movs	r3, #67	; 0x43
 800115a:	e008      	b.n	800116e <interfaceValueKey+0x9a>
	case 12: return 42; break;
 800115c:	232a      	movs	r3, #42	; 0x2a
 800115e:	e006      	b.n	800116e <interfaceValueKey+0x9a>
	case 13: return 48; break;
 8001160:	2330      	movs	r3, #48	; 0x30
 8001162:	e004      	b.n	800116e <interfaceValueKey+0x9a>
	case 14: return 35; break;
 8001164:	2323      	movs	r3, #35	; 0x23
 8001166:	e002      	b.n	800116e <interfaceValueKey+0x9a>
	case 15: return 68; break;
 8001168:	2344      	movs	r3, #68	; 0x44
 800116a:	e000      	b.n	800116e <interfaceValueKey+0x9a>
	default: return 111;
 800116c:	236f      	movs	r3, #111	; 0x6f
	}
	return (char)111;
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <lcd_send_cmd>:

static char cursor_pos = 0;


void lcd_send_cmd (char cmd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f043 030c 	orr.w	r3, r3, #12
 800119a:	b2db      	uxtb	r3, r3
 800119c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	f043 030c 	orr.w	r3, r3, #12
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2304      	movs	r3, #4
 80011c6:	214e      	movs	r1, #78	; 0x4e
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <lcd_send_cmd+0x5c>)
 80011ca:	f001 ffb5 	bl	8003138 <HAL_I2C_Master_Transmit>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000118 	.word	0x20000118

080011dc <lcd_send_data>:


void lcd_send_data (char data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	lcd_put_cursor((int)cursor_pos/20,(int)cursor_pos%20);
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <lcd_send_data+0xa4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4a26      	ldr	r2, [pc, #152]	; (8001284 <lcd_send_data+0xa8>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <lcd_send_data+0xa4>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <lcd_send_data+0xa8>)
 80011fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001200:	0919      	lsrs	r1, r3, #4
 8001202:	460b      	mov	r3, r1
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	f000 f8b4 	bl	800137c <lcd_put_cursor>

	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f023 030f 	bic.w	r3, r3, #15
 800121a:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f043 030d 	orr.w	r3, r3, #13
 8001228:	b2db      	uxtb	r3, r3
 800122a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f043 0309 	orr.w	r3, r3, #9
 8001232:	b2db      	uxtb	r3, r3
 8001234:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	f043 030d 	orr.w	r3, r3, #13
 800123c:	b2db      	uxtb	r3, r3
 800123e:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	f043 0309 	orr.w	r3, r3, #9
 8001246:	b2db      	uxtb	r3, r3
 8001248:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2304      	movs	r3, #4
 8001254:	214e      	movs	r1, #78	; 0x4e
 8001256:	480c      	ldr	r0, [pc, #48]	; (8001288 <lcd_send_data+0xac>)
 8001258:	f001 ff6e 	bl	8003138 <HAL_I2C_Master_Transmit>
	if (cursor_pos<79)
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <lcd_send_data+0xa4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b4e      	cmp	r3, #78	; 0x4e
 8001262:	d806      	bhi.n	8001272 <lcd_send_data+0x96>
		cursor_pos++;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <lcd_send_data+0xa4>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <lcd_send_data+0xa4>)
 800126e:	701a      	strb	r2, [r3, #0]
	else
		cursor_pos=0;

}
 8001270:	e002      	b.n	8001278 <lcd_send_data+0x9c>
		cursor_pos=0;
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <lcd_send_data+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000b4 	.word	0x200000b4
 8001284:	cccccccd 	.word	0xcccccccd
 8001288:	20000118 	.word	0x20000118

0800128c <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001290:	2032      	movs	r0, #50	; 0x32
 8001292:	f000 feb1 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001296:	2030      	movs	r0, #48	; 0x30
 8001298:	f7ff ff70 	bl	800117c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800129c:	2005      	movs	r0, #5
 800129e:	f000 feab 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012a2:	2030      	movs	r0, #48	; 0x30
 80012a4:	f7ff ff6a 	bl	800117c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 fea5 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012ae:	2030      	movs	r0, #48	; 0x30
 80012b0:	f7ff ff64 	bl	800117c <lcd_send_cmd>
	HAL_Delay(10);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 fe9f 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80012ba:	2020      	movs	r0, #32
 80012bc:	f7ff ff5e 	bl	800117c <lcd_send_cmd>
	HAL_Delay(10);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f000 fe99 	bl	8001ff8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x29); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012c6:	2029      	movs	r0, #41	; 0x29
 80012c8:	f7ff ff58 	bl	800117c <lcd_send_cmd>
	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f000 fe93 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80012d2:	2008      	movs	r0, #8
 80012d4:	f7ff ff52 	bl	800117c <lcd_send_cmd>
	HAL_Delay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f000 fe8d 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff ff4c 	bl	800117c <lcd_send_cmd>
	HAL_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f000 fe87 	bl	8001ff8 <HAL_Delay>
	HAL_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fe84 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012f0:	2006      	movs	r0, #6
 80012f2:	f7ff ff43 	bl	800117c <lcd_send_cmd>
	HAL_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 fe7e 	bl	8001ff8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012fc:	200c      	movs	r0, #12
 80012fe:	f7ff ff3d 	bl	800117c <lcd_send_cmd>

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <lcd_send_string>:

void lcd_send_string (char *str,bool adjust_to_line)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
	int contador=0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
	while (*str){
 8001318:	e009      	b.n	800132e <lcd_send_string+0x26>
		lcd_send_data (*str++);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff5a 	bl	80011dc <lcd_send_data>
		contador++;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
	while (*str){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f1      	bne.n	800131a <lcd_send_string+0x12>

	}
	if(adjust_to_line== true)
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d018      	beq.n	800136e <lcd_send_string+0x66>
	{
		int blank_spaces = 20- contador%20;
 800133c:	68f9      	ldr	r1, [r7, #12]
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <lcd_send_string+0x70>)
 8001340:	fb83 2301 	smull	r2, r3, r3, r1
 8001344:	10da      	asrs	r2, r3, #3
 8001346:	17cb      	asrs	r3, r1, #31
 8001348:	1ad2      	subs	r2, r2, r3
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	1aca      	subs	r2, r1, r3
 8001354:	f1c2 0314 	rsb	r3, r2, #20
 8001358:	60bb      	str	r3, [r7, #8]

		while (blank_spaces >0){
 800135a:	e005      	b.n	8001368 <lcd_send_string+0x60>

			lcd_send_data (' ');
 800135c:	2020      	movs	r0, #32
 800135e:	f7ff ff3d 	bl	80011dc <lcd_send_data>
			blank_spaces--;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3b01      	subs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
		while (blank_spaces >0){
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dcf6      	bgt.n	800135c <lcd_send_string+0x54>
		}

	}

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	66666667 	.word	0x66666667

0800137c <lcd_put_cursor>:

void lcd_put_cursor(int row, int col)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d817      	bhi.n	80013bc <lcd_put_cursor+0x40>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <lcd_put_cursor+0x18>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013bd 	.word	0x080013bd
 8001398:	080013a5 	.word	0x080013a5
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013b5 	.word	0x080013b5
    {
        case 0:
            col += 0x00;
            break;
        case 1:
            col += 0x40;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3340      	adds	r3, #64	; 0x40
 80013a8:	603b      	str	r3, [r7, #0]
            break;
 80013aa:	e007      	b.n	80013bc <lcd_put_cursor+0x40>
				case 2:
            col += 0x14;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3314      	adds	r3, #20
 80013b0:	603b      	str	r3, [r7, #0]
            break;
 80013b2:	e003      	b.n	80013bc <lcd_put_cursor+0x40>
				case 3:
            col += 0x54;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	3354      	adds	r3, #84	; 0x54
 80013b8:	603b      	str	r3, [r7, #0]
            break;
 80013ba:	bf00      	nop
    }

    lcd_send_cmd (col|=0x80);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fed7 	bl	800117c <lcd_send_cmd>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b09e      	sub	sp, #120	; 0x78
 80013dc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	sample_dt = (double) F_OUT/F_SAMPLE;
 80013de:	493c      	ldr	r1, [pc, #240]	; (80014d0 <main+0xf8>)
 80013e0:	a339      	add	r3, pc, #228	; (adr r3, 80014c8 <main+0xf0>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	e9c1 2300 	strd	r2, r3, [r1]
	sample_N = F_SAMPLE/F_OUT;
 80013ea:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <main+0xfc>)
 80013ec:	2271      	movs	r2, #113	; 0x71
 80013ee:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f0:	f000 fd90 	bl	8001f14 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 80013f4:	f7ff ff4a 	bl	800128c <lcd_init>
  initKeyPad();
 80013f8:	f7ff fdcc 	bl	8000f94 <initKeyPad>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f87a 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 fa02 	bl	8001808 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001404:	f000 f938 	bl	8001678 <MX_I2C2_Init>
  MX_DMA_Init();
 8001408:	f000 f9de 	bl	80017c8 <MX_DMA_Init>
  MX_I2C1_Init();
 800140c:	f000 f906 	bl	800161c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001410:	f000 f960 	bl	80016d4 <MX_I2S3_Init>
  MX_DAC_Init();
 8001414:	f000 f8d8 	bl	80015c8 <MX_DAC_Init>
  MX_TIM3_Init();
 8001418:	f000 f98a 	bl	8001730 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  CS43_Init(hi2c1,MODE_ANALOG_CS43);
 800141c:	4c2e      	ldr	r4, [pc, #184]	; (80014d8 <main+0x100>)
 800141e:	2301      	movs	r3, #1
 8001420:	9311      	str	r3, [sp, #68]	; 0x44
 8001422:	4668      	mov	r0, sp
 8001424:	f104 0310 	add.w	r3, r4, #16
 8001428:	2244      	movs	r2, #68	; 0x44
 800142a:	4619      	mov	r1, r3
 800142c:	f004 fcc2 	bl	8005db4 <memcpy>
 8001430:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001434:	f7ff fbba 	bl	8000bac <CS43_Init>
  CS43_SetVolume(50);
 8001438:	2032      	movs	r0, #50	; 0x32
 800143a:	f7ff fd27 	bl	8000e8c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800143e:	2003      	movs	r0, #3
 8001440:	f7ff fcc8 	bl	8000dd4 <CS43_Enable_RightLeft>
  CS43_Start();
 8001444:	f7ff fd64 	bl	8000f10 <CS43_Start>

  HAL_I2S_Transmit_DMA(&hi2s3,(uint16_t *) dataI2S,4);
 8001448:	2204      	movs	r2, #4
 800144a:	4924      	ldr	r1, [pc, #144]	; (80014dc <main+0x104>)
 800144c:	4824      	ldr	r0, [pc, #144]	; (80014e0 <main+0x108>)
 800144e:	f002 fe05 	bl	800405c <HAL_I2S_Transmit_DMA>
  // Iniciamos el DAC

  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8001452:	2100      	movs	r1, #0
 8001454:	4823      	ldr	r0, [pc, #140]	; (80014e4 <main+0x10c>)
 8001456:	f000 ff26 	bl	80022a6 <HAL_DAC_Start>

  // Iniciamos el timer

  HAL_TIM_Base_Start_IT(&htim3);
 800145a:	4823      	ldr	r0, [pc, #140]	; (80014e8 <main+0x110>)
 800145c:	f004 f854 	bl	8005508 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char mensaje[15] = "FUNCIONA LCD";
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <main+0x114>)
 8001462:	f107 0420 	add.w	r4, r7, #32
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	c407      	stmia	r4!, {r0, r1, r2}
 800146a:	7023      	strb	r3, [r4, #0]
 800146c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]

	lcd_send_string (mensaje,true);
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff44 	bl	8001308 <lcd_send_string>
	HAL_Delay(1000);
 8001480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001484:	f000 fdb8 	bl	8001ff8 <HAL_Delay>
	char a = readKeyPad();
 8001488:	f7ff fda6 	bl	8000fd8 <readKeyPad>
 800148c:	4603      	mov	r3, r0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	77fb      	strb	r3, [r7, #31]
	if (a!=111){
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	2b6f      	cmp	r3, #111	; 0x6f
 8001496:	d0e3      	beq.n	8001460 <main+0x88>
		char mensaje[27] = "Ha selecionado la tecla: ";
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <main+0x118>)
 800149a:	1d3c      	adds	r4, r7, #4
 800149c:	461d      	mov	r5, r3
 800149e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a6:	c403      	stmia	r4!, {r0, r1}
 80014a8:	8022      	strh	r2, [r4, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	77bb      	strb	r3, [r7, #30]
		strncat(mensaje, &a, 1);
 80014ae:	f107 011f 	add.w	r1, r7, #31
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2201      	movs	r2, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 fc92 	bl	8005de0 <strncat>
		lcd_send_string (mensaje,true);
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2101      	movs	r1, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff21 	bl	8001308 <lcd_send_string>
  {
 80014c6:	e7cb      	b.n	8001460 <main+0x88>
 80014c8:	01a36e2f 	.word	0x01a36e2f
 80014cc:	3f8205bc 	.word	0x3f8205bc
 80014d0:	20000228 	.word	0x20000228
 80014d4:	200000b8 	.word	0x200000b8
 80014d8:	200000c0 	.word	0x200000c0
 80014dc:	20000278 	.word	0x20000278
 80014e0:	20000230 	.word	0x20000230
 80014e4:	20000214 	.word	0x20000214
 80014e8:	2000016c 	.word	0x2000016c
 80014ec:	080068f8 	.word	0x080068f8
 80014f0:	08006908 	.word	0x08006908

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2230      	movs	r2, #48	; 0x30
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fc64 	bl	8005dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <SystemClock_Config+0xcc>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <SystemClock_Config+0xcc>)
 8001522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <SystemClock_Config+0xcc>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <SystemClock_Config+0xd0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <SystemClock_Config+0xd0>)
 800153e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <SystemClock_Config+0xd0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001568:	23a8      	movs	r3, #168	; 0xa8
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001570:	2307      	movs	r3, #7
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4618      	mov	r0, r3
 800157a:	f003 f9d5 	bl	8004928 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001584:	f000 fa76 	bl	8001a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001594:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2105      	movs	r1, #5
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fc36 	bl	8004e18 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015b2:	f000 fa5f 	bl	8001a74 <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3750      	adds	r7, #80	; 0x50
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000

080015c8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_DAC_Init+0x4c>)
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <MX_DAC_Init+0x50>)
 80015da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_DAC_Init+0x4c>)
 80015de:	f000 fe40 	bl	8002262 <HAL_DAC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015e8:	f000 fa44 	bl	8001a74 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_DAC_Init+0x4c>)
 80015fc:	f000 feca 	bl	8002394 <HAL_DAC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001606:	f000 fa35 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000214 	.word	0x20000214
 8001618:	40007400 	.word	0x40007400

0800161c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C1_Init+0x50>)
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <MX_I2C1_Init+0x54>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C1_Init+0x50>)
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_I2C1_Init+0x58>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_I2C1_Init+0x50>)
 800163a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_I2C1_Init+0x50>)
 800165a:	f001 fc29 	bl	8002eb0 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001664:	f000 fa06 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200000c0 	.word	0x200000c0
 8001670:	40005400 	.word	0x40005400
 8001674:	000186a0 	.word	0x000186a0

08001678 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_I2C2_Init+0x50>)
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <MX_I2C2_Init+0x54>)
 8001680:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_I2C2_Init+0x50>)
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <MX_I2C2_Init+0x58>)
 8001686:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_I2C2_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_I2C2_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_I2C2_Init+0x50>)
 8001696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800169a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MX_I2C2_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_I2C2_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <MX_I2C2_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_I2C2_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_I2C2_Init+0x50>)
 80016b6:	f001 fbfb 	bl	8002eb0 <HAL_I2C_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016c0:	f000 f9d8 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000118 	.word	0x20000118
 80016cc:	40005800 	.word	0x40005800
 80016d0:	000186a0 	.word	0x000186a0

080016d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_I2S3_Init+0x54>)
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <MX_I2S3_Init+0x58>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_I2S3_Init+0x54>)
 80016e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_I2S3_Init+0x54>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_I2S3_Init+0x54>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_I2S3_Init+0x54>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_I2S3_Init+0x54>)
 80016fc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001700:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_I2S3_Init+0x54>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_I2S3_Init+0x54>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_I2S3_Init+0x54>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_I2S3_Init+0x54>)
 8001716:	f002 fb61 	bl	8003ddc <HAL_I2S_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001720:	f000 f9a8 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000230 	.word	0x20000230
 800172c:	40003c00 	.word	0x40003c00

08001730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_TIM3_Init+0x90>)
 800174e:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <MX_TIM3_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_TIM3_Init+0x90>)
 8001754:	2253      	movs	r2, #83	; 0x53
 8001756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_TIM3_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM3_Init+0x90>)
 8001760:	2213      	movs	r2, #19
 8001762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM3_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM3_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM3_Init+0x90>)
 8001772:	f003 fe79 	bl	8005468 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800177c:	f000 f97a 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM3_Init+0x90>)
 800178e:	f004 f833 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001798:	f000 f96c 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800179c:	2320      	movs	r3, #32
 800179e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM3_Init+0x90>)
 80017aa:	f004 fa4f 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80017b4:	f000 f95e 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000016c 	.word	0x2000016c
 80017c4:	40000400 	.word	0x40000400

080017c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_DMA_Init+0x3c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <MX_DMA_Init+0x3c>)
 80017d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_DMA_Init+0x3c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2010      	movs	r0, #16
 80017f0:	f000 fd01 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017f4:	2010      	movs	r0, #16
 80017f6:	f000 fd1a 	bl	800222e <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <MX_GPIO_Init+0x184>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a59      	ldr	r2, [pc, #356]	; (800198c <MX_GPIO_Init+0x184>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b57      	ldr	r3, [pc, #348]	; (800198c <MX_GPIO_Init+0x184>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b53      	ldr	r3, [pc, #332]	; (800198c <MX_GPIO_Init+0x184>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a52      	ldr	r2, [pc, #328]	; (800198c <MX_GPIO_Init+0x184>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <MX_GPIO_Init+0x184>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <MX_GPIO_Init+0x184>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a4b      	ldr	r2, [pc, #300]	; (800198c <MX_GPIO_Init+0x184>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <MX_GPIO_Init+0x184>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b45      	ldr	r3, [pc, #276]	; (800198c <MX_GPIO_Init+0x184>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a44      	ldr	r2, [pc, #272]	; (800198c <MX_GPIO_Init+0x184>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <MX_GPIO_Init+0x184>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <MX_GPIO_Init+0x184>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <MX_GPIO_Init+0x184>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <MX_GPIO_Init+0x184>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW1_Pin|ROW2_Pin, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	210a      	movs	r1, #10
 80018ae:	4838      	ldr	r0, [pc, #224]	; (8001990 <MX_GPIO_Init+0x188>)
 80018b0:	f001 fae4 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW3_Pin|ROW4_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	210a      	movs	r1, #10
 80018b8:	4836      	ldr	r0, [pc, #216]	; (8001994 <MX_GPIO_Init+0x18c>)
 80018ba:	f001 fadf 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018be:	2200      	movs	r2, #0
 80018c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80018c4:	4834      	ldr	r0, [pc, #208]	; (8001998 <MX_GPIO_Init+0x190>)
 80018c6:	f001 fad9 	bl	8002e7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin;
 80018ca:	230a      	movs	r3, #10
 80018cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	482b      	ldr	r0, [pc, #172]	; (8001990 <MX_GPIO_Init+0x188>)
 80018e2:	f001 f917 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018e6:	2301      	movs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4826      	ldr	r0, [pc, #152]	; (8001994 <MX_GPIO_Init+0x18c>)
 80018fc:	f001 f90a 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW3_Pin ROW4_Pin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW4_Pin;
 8001900:	230a      	movs	r3, #10
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001908:	2301      	movs	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	481f      	ldr	r0, [pc, #124]	; (8001994 <MX_GPIO_Init+0x18c>)
 8001918:	f001 f8fc 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin;
 800191c:	23a0      	movs	r3, #160	; 0xa0
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4819      	ldr	r0, [pc, #100]	; (8001994 <MX_GPIO_Init+0x18c>)
 8001930:	f001 f8f0 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL3_Pin */
  GPIO_InitStruct.Pin = COL3_Pin;
 8001934:	2320      	movs	r3, #32
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL3_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <MX_GPIO_Init+0x188>)
 8001948:	f001 f8e4 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 800194c:	2302      	movs	r3, #2
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480f      	ldr	r0, [pc, #60]	; (800199c <MX_GPIO_Init+0x194>)
 8001960:	f001 f8d8 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001964:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001968:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <MX_GPIO_Init+0x190>)
 800197e:	f001 f8c9 	bl	8002b14 <HAL_GPIO_Init>

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020800 	.word	0x40020800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40020400 	.word	0x40020400

080019a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if (htim->Instance == TIM3){
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d14a      	bne.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0xa8>
	  mySinVal = sinf(i_t*2*PI*sample_dt);
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0xb8>
 80019c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c8:	ee17 0a90 	vmov	r0, s15
 80019cc:	f7fe fe8a 	bl	80006e4 <__aeabi_f2d>
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fbf7 	bl	80001c8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7fe fed7 	bl	8000794 <__aeabi_d2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	ee00 3a10 	vmov	s0, r3
 80019ec:	f004 fa0c 	bl	8005e08 <sinf>
 80019f0:	eef0 7a40 	vmov.f32	s15, s0
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80019f6:	edc3 7a00 	vstr	s15, [r3]
	  myDACVal = (mySinVal+1)*127;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a08:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001a64 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a14:	ee17 2a90 	vmov	r2, s15
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a1a:	601a      	str	r2, [r3, #0]
	  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_8B_R,myDACVal);
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	2100      	movs	r1, #0
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a26:	f000 fc90 	bl	800234a <HAL_DAC_SetValue>
	  i_t++;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a34:	801a      	strh	r2, [r3, #0]
	  if (i_t>=sample_N)i_t=0;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d302      	bcc.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	801a      	strh	r2, [r3, #0]
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40000400 	.word	0x40000400
 8001a54:	20000280 	.word	0x20000280
 8001a58:	40490fdb 	.word	0x40490fdb
 8001a5c:	20000228 	.word	0x20000228
 8001a60:	200000bc 	.word	0x200000bc
 8001a64:	42fe0000 	.word	0x42fe0000
 8001a68:	20000114 	.word	0x20000114
 8001a6c:	20000214 	.word	0x20000214
 8001a70:	200000b8 	.word	0x200000b8

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <HAL_MspInit+0x4c>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_MspInit+0x4c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001abe:	2007      	movs	r0, #7
 8001ac0:	f000 fb8e 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_DAC_MspInit+0x7c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d127      	bne.n	8001b42 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_DAC_MspInit+0x80>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_DAC_MspInit+0x80>)
 8001afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_DAC_MspInit+0x80>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_DAC_MspInit+0x80>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_DAC_MspInit+0x80>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_DAC_MspInit+0x80>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_DAC_MspInit+0x84>)
 8001b3e:	f000 ffe9 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40007400 	.word	0x40007400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_I2C_MspInit+0xec>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12d      	bne.n	8001bd6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001b96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4826      	ldr	r0, [pc, #152]	; (8001c4c <HAL_I2C_MspInit+0xf4>)
 8001bb4:	f000 ffae 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bd4:	e031      	b.n	8001c3a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_I2C_MspInit+0xf8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d12c      	bne.n	8001c3a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001bfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	2312      	movs	r3, #18
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_I2C_MspInit+0xf4>)
 8001c1a:	f000 ff7b 	bl	8002b14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_I2C_MspInit+0xf0>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005400 	.word	0x40005400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40005800 	.word	0x40005800

08001c54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	; 0x38
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_I2S_MspInit+0x164>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f040 8095 	bne.w	8001db0 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c86:	2301      	movs	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001c8a:	2332      	movs	r3, #50	; 0x32
 8001c8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 faa6 	bl	80051e8 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001ca2:	f7ff fee7 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a43      	ldr	r2, [pc, #268]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a35      	ldr	r2, [pc, #212]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_I2S_MspInit+0x168>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001cfa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	482a      	ldr	r0, [pc, #168]	; (8001dc0 <HAL_I2S_MspInit+0x16c>)
 8001d18:	f000 fefc 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2e:	2306      	movs	r3, #6
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	4822      	ldr	r0, [pc, #136]	; (8001dc4 <HAL_I2S_MspInit+0x170>)
 8001d3a:	f000 feeb 	bl	8002b14 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d3e:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_I2S_MspInit+0x178>)
 8001d42:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d64:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d7e:	2204      	movs	r2, #4
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d84:	2203      	movs	r2, #3
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001d96:	f000 fb4d 	bl	8002434 <HAL_DMA_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001da0:	f7ff fe68 	bl	8001a74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_I2S_MspInit+0x174>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3738      	adds	r7, #56	; 0x38
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40003c00 	.word	0x40003c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	200001b4 	.word	0x200001b4
 8001dcc:	40026088 	.word	0x40026088

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_TIM_Base_MspInit+0x48>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d115      	bne.n	8001e0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_TIM_Base_MspInit+0x4c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <HAL_TIM_Base_MspInit+0x4c>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_TIM_Base_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	201d      	movs	r0, #29
 8001e04:	f000 f9f7 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e08:	201d      	movs	r0, #29
 8001e0a:	f000 fa10 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40023800 	.word	0x40023800

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 f8a4 	bl	8001fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA1_Stream5_IRQHandler+0x10>)
 8001e7a:	f000 fbe1 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200001b4 	.word	0x200001b4

08001e88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM3_IRQHandler+0x10>)
 8001e8e:	f003 fbab 	bl	80055e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000016c 	.word	0x2000016c

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec6:	490e      	ldr	r1, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001edc:	4c0b      	ldr	r4, [pc, #44]	; (8001f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffd7 	bl	8001e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f003 ff3d 	bl	8005d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff fa71 	bl	80013d8 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001f04:	08006d24 	.word	0x08006d24
  ldr r2, =_sbss
 8001f08:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001f0c:	20000288 	.word	0x20000288

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f94f 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f808 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7ff fd9a 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f967 	bl	800224a <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 f92f 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000030 	.word	0x20000030
 8001fb0:	20000038 	.word	0x20000038
 8001fb4:	20000034 	.word	0x20000034

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000038 	.word	0x20000038
 8001fdc:	20000284 	.word	0x20000284

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000284 	.word	0x20000284

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000038 	.word	0x20000038

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff3e 	bl	8002088 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff31 	bl	80020a4 <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e014      	b.n	800229e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	791b      	ldrb	r3, [r3, #4]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fc23 	bl	8001ad0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	795b      	ldrb	r3, [r3, #5]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_DAC_Start+0x16>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e040      	b.n	800233e <HAL_DAC_Start+0x98>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80022f0:	2b3c      	cmp	r3, #60	; 0x3c
 80022f2:	d11d      	bne.n	8002330 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	e014      	b.n	8002330 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	213c      	movs	r1, #60	; 0x3c
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0202 	orr.w	r2, r2, #2
 800232e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800234a:	b480      	push	{r7}
 800234c:	b087      	sub	sp, #28
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	3308      	adds	r3, #8
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e004      	b.n	800237e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3314      	adds	r3, #20
 800237c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	795b      	ldrb	r3, [r3, #5]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_DAC_ConfigChannel+0x18>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e03c      	b.n	8002426 <HAL_DAC_ConfigChannel+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2202      	movs	r2, #2
 80023b6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4013      	ands	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	22c0      	movs	r2, #192	; 0xc0
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff fdce 	bl	8001fe0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e099      	b.n	8002584 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002470:	e00f      	b.n	8002492 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002472:	f7ff fdb5 	bl	8001fe0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b05      	cmp	r3, #5
 800247e:	d908      	bls.n	8002492 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e078      	b.n	8002584 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e8      	bne.n	8002472 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4b38      	ldr	r3, [pc, #224]	; (800258c <HAL_DMA_Init+0x158>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d107      	bne.n	80024fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4313      	orrs	r3, r2
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f023 0307 	bic.w	r3, r3, #7
 8002512:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2b04      	cmp	r3, #4
 8002524:	d117      	bne.n	8002556 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa6f 	bl	8002a1c <DMA_CheckFifoParam>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2240      	movs	r2, #64	; 0x40
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002552:	2301      	movs	r3, #1
 8002554:	e016      	b.n	8002584 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa26 	bl	80029b0 <DMA_CalcBaseAndBitshift>
 8002564:	4603      	mov	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	223f      	movs	r2, #63	; 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	f010803f 	.word	0xf010803f

08002590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Start_IT+0x26>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e040      	b.n	8002638 <HAL_DMA_Start_IT+0xa8>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d12f      	bne.n	800262a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f9b8 	bl	8002954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	223f      	movs	r2, #63	; 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0216 	orr.w	r2, r2, #22
 80025fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0208 	orr.w	r2, r2, #8
 8002616:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e005      	b.n	8002636 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002636:	7dfb      	ldrb	r3, [r7, #23]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_DMA_IRQHandler+0x258>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a92      	ldr	r2, [pc, #584]	; (800289c <HAL_DMA_IRQHandler+0x25c>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a9b      	lsrs	r3, r3, #10
 8002658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2208      	movs	r2, #8
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2208      	movs	r2, #8
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2201      	movs	r2, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2204      	movs	r2, #4
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2210      	movs	r2, #16
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d043      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03c      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2210      	movs	r2, #16
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d018      	beq.n	8002782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d024      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e01f      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e016      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0208 	bic.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2220      	movs	r2, #32
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 808e 	beq.w	80028de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8086 	beq.w	80028de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2220      	movs	r2, #32
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d136      	bne.n	8002858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0216 	bic.w	r2, r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_DMA_IRQHandler+0x1da>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	223f      	movs	r2, #63	; 0x3f
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07d      	beq.n	800294a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
        }
        return;
 8002856:	e078      	b.n	800294a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01c      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	2b00      	cmp	r3, #0
 800287a:	d030      	beq.n	80028de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e02b      	b.n	80028de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d027      	beq.n	80028de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
 8002896:	e022      	b.n	80028de <HAL_DMA_IRQHandler+0x29e>
 8002898:	20000030 	.word	0x20000030
 800289c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0210 	bic.w	r2, r2, #16
 80028bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d032      	beq.n	800294c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d022      	beq.n	8002938 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2205      	movs	r2, #5
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3301      	adds	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	429a      	cmp	r2, r3
 8002914:	d307      	bcc.n	8002926 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f2      	bne.n	800290a <HAL_DMA_IRQHandler+0x2ca>
 8002924:	e000      	b.n	8002928 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002926:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0x30c>
        return;
 800294a:	bf00      	nop
    }
  }
}
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d108      	bne.n	8002994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002992:	e007      	b.n	80029a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3b10      	subs	r3, #16
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <DMA_CalcBaseAndBitshift+0x64>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <DMA_CalcBaseAndBitshift+0x68>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d909      	bls.n	80029f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	; 0x58
 80029f0:	e007      	b.n	8002a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	aaaaaaab 	.word	0xaaaaaaab
 8002a18:	0800693c 	.word	0x0800693c

08002a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0x5a>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d856      	bhi.n	8002aea <DMA_CheckFifoParam+0xce>
 8002a3c:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <DMA_CheckFifoParam+0x28>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a67 	.word	0x08002a67
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002aeb 	.word	0x08002aeb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d046      	beq.n	8002aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e043      	b.n	8002aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a6e:	d140      	bne.n	8002af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e03d      	b.n	8002af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d121      	bne.n	8002ac4 <DMA_CheckFifoParam+0xa8>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d837      	bhi.n	8002af6 <DMA_CheckFifoParam+0xda>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <DMA_CheckFifoParam+0x70>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa3 	.word	0x08002aa3
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002ab5 	.word	0x08002ab5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e030      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e022      	b.n	8002afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abc:	d11f      	bne.n	8002afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ac2:	e01c      	b.n	8002afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d903      	bls.n	8002ad2 <DMA_CheckFifoParam+0xb6>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad0:	e018      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad6:	e015      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e00b      	b.n	8002b02 <DMA_CheckFifoParam+0xe6>
      break;
 8002aea:	bf00      	nop
 8002aec:	e00a      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
    }
  } 
  
  return status; 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e16b      	b.n	8002e08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 815a 	bne.w	8002e02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d005      	beq.n	8002b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d130      	bne.n	8002bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 0201 	and.w	r2, r3, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d017      	beq.n	8002c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80b4 	beq.w	8002e02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <HAL_GPIO_Init+0x30c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_GPIO_Init+0x30c>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_GPIO_Init+0x30c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a5b      	ldr	r2, [pc, #364]	; (8002e24 <HAL_GPIO_Init+0x310>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_GPIO_Init+0x314>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <HAL_GPIO_Init+0x318>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d025      	beq.n	8002d36 <HAL_GPIO_Init+0x222>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a50      	ldr	r2, [pc, #320]	; (8002e30 <HAL_GPIO_Init+0x31c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <HAL_GPIO_Init+0x21e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	; (8002e34 <HAL_GPIO_Init+0x320>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d019      	beq.n	8002d2e <HAL_GPIO_Init+0x21a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4e      	ldr	r2, [pc, #312]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0x216>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4d      	ldr	r2, [pc, #308]	; (8002e3c <HAL_GPIO_Init+0x328>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00d      	beq.n	8002d26 <HAL_GPIO_Init+0x212>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4c      	ldr	r2, [pc, #304]	; (8002e40 <HAL_GPIO_Init+0x32c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x20e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4b      	ldr	r2, [pc, #300]	; (8002e44 <HAL_GPIO_Init+0x330>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_GPIO_Init+0x20a>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e00e      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	e00c      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d22:	2306      	movs	r3, #6
 8002d24:	e00a      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e008      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f002 0203 	and.w	r2, r2, #3
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4093      	lsls	r3, r2
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_GPIO_Init+0x310>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7e:	4a32      	ldr	r2, [pc, #200]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d84:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da8:	4a27      	ldr	r2, [pc, #156]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f67f ae90 	bls.w	8002b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40021c00 	.word	0x40021c00
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e001      	b.n	8002e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e12b      	b.n	800311a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fe3e 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f14:	f002 f954 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8002f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a81      	ldr	r2, [pc, #516]	; (8003124 <HAL_I2C_Init+0x274>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d807      	bhi.n	8002f34 <HAL_I2C_Init+0x84>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a80      	ldr	r2, [pc, #512]	; (8003128 <HAL_I2C_Init+0x278>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e006      	b.n	8002f42 <HAL_I2C_Init+0x92>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a7d      	ldr	r2, [pc, #500]	; (800312c <HAL_I2C_Init+0x27c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0e7      	b.n	800311a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a78      	ldr	r2, [pc, #480]	; (8003130 <HAL_I2C_Init+0x280>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9b      	lsrs	r3, r3, #18
 8002f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a6a      	ldr	r2, [pc, #424]	; (8003124 <HAL_I2C_Init+0x274>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d802      	bhi.n	8002f84 <HAL_I2C_Init+0xd4>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3301      	adds	r3, #1
 8002f82:	e009      	b.n	8002f98 <HAL_I2C_Init+0xe8>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a69      	ldr	r2, [pc, #420]	; (8003134 <HAL_I2C_Init+0x284>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	3301      	adds	r3, #1
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	495c      	ldr	r1, [pc, #368]	; (8003124 <HAL_I2C_Init+0x274>)
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	d819      	bhi.n	8002fec <HAL_I2C_Init+0x13c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc6:	1c59      	adds	r1, r3, #1
 8002fc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fcc:	400b      	ands	r3, r1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_I2C_Init+0x138>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e59      	subs	r1, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	e051      	b.n	800308c <HAL_I2C_Init+0x1dc>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e04f      	b.n	800308c <HAL_I2C_Init+0x1dc>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d111      	bne.n	8003018 <HAL_I2C_Init+0x168>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e012      	b.n	800303e <HAL_I2C_Init+0x18e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	0099      	lsls	r1, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x196>
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_I2C_Init+0x1dc>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <HAL_I2C_Init+0x1bc>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e58      	subs	r0, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	440b      	add	r3, r1
 800305c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	e00f      	b.n	800308c <HAL_I2C_Init+0x1dc>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6809      	ldr	r1, [r1, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6911      	ldr	r1, [r2, #16]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	000186a0 	.word	0x000186a0
 8003128:	001e847f 	.word	0x001e847f
 800312c:	003d08ff 	.word	0x003d08ff
 8003130:	431bde83 	.word	0x431bde83
 8003134:	10624dd3 	.word	0x10624dd3

08003138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	460b      	mov	r3, r1
 8003146:	817b      	strh	r3, [r7, #10]
 8003148:	4613      	mov	r3, r2
 800314a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7fe ff48 	bl	8001fe0 <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	f040 80e0 	bne.w	8003320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2319      	movs	r3, #25
 8003166:	2201      	movs	r2, #1
 8003168:	4970      	ldr	r1, [pc, #448]	; (800332c <HAL_I2C_Master_Transmit+0x1f4>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fc58 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	e0d3      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2C_Master_Transmit+0x50>
 8003184:	2302      	movs	r3, #2
 8003186:	e0cc      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d007      	beq.n	80031ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2221      	movs	r2, #33	; 0x21
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2210      	movs	r2, #16
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	893a      	ldrh	r2, [r7, #8]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_I2C_Master_Transmit+0x1f8>)
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fac2 	bl	8003780 <I2C_MasterRequestWrite>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e08d      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800321c:	e066      	b.n	80032ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6a39      	ldr	r1, [r7, #32]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fcd2 	bl	8003bcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b04      	cmp	r3, #4
 8003234:	d107      	bne.n	8003246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06b      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d11b      	bne.n	80032c0 <HAL_I2C_Master_Transmit+0x188>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d017      	beq.n	80032c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	6a39      	ldr	r1, [r7, #32]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fcc2 	bl	8003c4e <I2C_WaitOnBTFFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e01a      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d194      	bne.n	800321e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	00100002 	.word	0x00100002
 8003330:	ffff0000 	.word	0xffff0000

08003334 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
 8003344:	4613      	mov	r3, r2
 8003346:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7fe fe4a 	bl	8001fe0 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b20      	cmp	r3, #32
 8003358:	f040 820b 	bne.w	8003772 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2319      	movs	r3, #25
 8003362:	2201      	movs	r2, #1
 8003364:	497c      	ldr	r1, [pc, #496]	; (8003558 <HAL_I2C_Master_Receive+0x224>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fb5a 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	e1fe      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_I2C_Master_Receive+0x50>
 8003380:	2302      	movs	r3, #2
 8003382:	e1f7      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d007      	beq.n	80033aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2222      	movs	r2, #34	; 0x22
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2210      	movs	r2, #16
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	893a      	ldrh	r2, [r7, #8]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a5c      	ldr	r2, [pc, #368]	; (800355c <HAL_I2C_Master_Receive+0x228>)
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ec:	8979      	ldrh	r1, [r7, #10]
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa46 	bl	8003884 <I2C_MasterRequestRead>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1b8      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e18c      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b01      	cmp	r3, #1
 8003438:	d11b      	bne.n	8003472 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e16c      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	2b02      	cmp	r3, #2
 8003478:	d11b      	bne.n	80034b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003488:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	e14c      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034d8:	e138      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	2b03      	cmp	r3, #3
 80034e0:	f200 80f1 	bhi.w	80036c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d123      	bne.n	8003534 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fbed 	bl	8003cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e139      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003532:	e10b      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b02      	cmp	r3, #2
 800353a:	d14e      	bne.n	80035da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	2200      	movs	r2, #0
 8003544:	4906      	ldr	r1, [pc, #24]	; (8003560 <HAL_I2C_Master_Receive+0x22c>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa6a 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e10e      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
 8003556:	bf00      	nop
 8003558:	00100002 	.word	0x00100002
 800355c:	ffff0000 	.word	0xffff0000
 8003560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d8:	e0b8      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	2200      	movs	r2, #0
 80035e2:	4966      	ldr	r1, [pc, #408]	; (800377c <HAL_I2C_Master_Receive+0x448>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa1b 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0bf      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	2200      	movs	r2, #0
 800363e:	494f      	ldr	r1, [pc, #316]	; (800377c <HAL_I2C_Master_Receive+0x448>)
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f9ed 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e091      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c4:	e042      	b.n	800374c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb00 	bl	8003cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e04c      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d118      	bne.n	800374c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f aec2 	bne.w	80034da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	00010004 	.word	0x00010004

08003780 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	460b      	mov	r3, r1
 800378e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d006      	beq.n	80037aa <I2C_MasterRequestWrite+0x2a>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d003      	beq.n	80037aa <I2C_MasterRequestWrite+0x2a>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a8:	d108      	bne.n	80037bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e00b      	b.n	80037d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b12      	cmp	r3, #18
 80037c2:	d107      	bne.n	80037d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f91d 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	d103      	bne.n	8003804 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e035      	b.n	8003874 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003810:	d108      	bne.n	8003824 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003820:	611a      	str	r2, [r3, #16]
 8003822:	e01b      	b.n	800385c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003824:	897b      	ldrh	r3, [r7, #10]
 8003826:	11db      	asrs	r3, r3, #7
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f063 030f 	orn	r3, r3, #15
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	490e      	ldr	r1, [pc, #56]	; (800387c <I2C_MasterRequestWrite+0xfc>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f943 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e010      	b.n	8003874 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4907      	ldr	r1, [pc, #28]	; (8003880 <I2C_MasterRequestWrite+0x100>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f933 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	00010008 	.word	0x00010008
 8003880:	00010002 	.word	0x00010002

08003884 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	460b      	mov	r3, r1
 8003892:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d006      	beq.n	80038be <I2C_MasterRequestRead+0x3a>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <I2C_MasterRequestRead+0x3a>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038bc:	d108      	bne.n	80038d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e00b      	b.n	80038e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	2b11      	cmp	r3, #17
 80038d6:	d107      	bne.n	80038e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f893 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d103      	bne.n	8003918 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e079      	b.n	8003a10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003924:	d108      	bne.n	8003938 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]
 8003936:	e05f      	b.n	80039f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003938:	897b      	ldrh	r3, [r7, #10]
 800393a:	11db      	asrs	r3, r3, #7
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 0306 	and.w	r3, r3, #6
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f063 030f 	orn	r3, r3, #15
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4930      	ldr	r1, [pc, #192]	; (8003a18 <I2C_MasterRequestRead+0x194>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8b9 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e054      	b.n	8003a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4929      	ldr	r1, [pc, #164]	; (8003a1c <I2C_MasterRequestRead+0x198>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8a9 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e044      	b.n	8003a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f831 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d2:	d103      	bne.n	80039dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e017      	b.n	8003a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039e0:	897b      	ldrh	r3, [r7, #10]
 80039e2:	11db      	asrs	r3, r3, #7
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0306 	and.w	r3, r3, #6
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f063 030e 	orn	r3, r3, #14
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <I2C_MasterRequestRead+0x198>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f865 	bl	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00010008 	.word	0x00010008
 8003a1c:	00010002 	.word	0x00010002

08003a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a30:	e025      	b.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d021      	beq.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fe fad1 	bl	8001fe0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e023      	b.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10d      	bne.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	e00c      	b.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d0b6      	beq.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003adc:	e051      	b.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	d123      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e046      	b.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d021      	beq.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fa4f 	bl	8001fe0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d116      	bne.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e020      	b.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10c      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e00b      	b.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d18d      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd8:	e02d      	b.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f8ce 	bl	8003d7c <I2C_IsAcknowledgeFailed>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e02d      	b.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d021      	beq.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe f9f5 	bl	8001fe0 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e007      	b.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d1ca      	bne.n	8003bda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c5a:	e02d      	b.n	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f88d 	bl	8003d7c <I2C_IsAcknowledgeFailed>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e02d      	b.n	8003cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d021      	beq.n	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7fe f9b4 	bl	8001fe0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d116      	bne.n	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d1ca      	bne.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cdc:	e042      	b.n	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d119      	bne.n	8003d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0210 	mvn.w	r2, #16
 8003cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e029      	b.n	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fe f95e 	bl	8001fe0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d116      	bne.n	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e007      	b.n	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d1b5      	bne.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d11b      	bne.n	8003dcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f043 0204 	orr.w	r2, r3, #4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e128      	b.n	8004040 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a90      	ldr	r2, [pc, #576]	; (8004048 <HAL_I2S_Init+0x26c>)
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fd ff23 	bl	8001c54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e24:	f023 030f 	bic.w	r3, r3, #15
 8003e28:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d060      	beq.n	8003efc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e42:	2310      	movs	r3, #16
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e001      	b.n	8003e4c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e48:	2320      	movs	r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d802      	bhi.n	8003e5a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f001 faa6 	bl	80053ac <HAL_RCCEx_GetPeriphCLKFreq>
 8003e60:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6a:	d125      	bne.n	8003eb8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	3305      	adds	r3, #5
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e01f      	b.n	8003ed6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	3305      	adds	r3, #5
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e00e      	b.n	8003ed6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	461a      	mov	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	3305      	adds	r3, #5
 8003ed4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4a5c      	ldr	r2, [pc, #368]	; (800404c <HAL_I2S_Init+0x270>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003efc:	2302      	movs	r3, #2
 8003efe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d902      	bls.n	8003f10 <HAL_I2S_Init+0x134>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2bff      	cmp	r3, #255	; 0xff
 8003f0e:	d907      	bls.n	8003f20 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f043 0210 	orr.w	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e08f      	b.n	8004040 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	ea42 0103 	orr.w	r1, r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f3e:	f023 030f 	bic.w	r3, r3, #15
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6851      	ldr	r1, [r2, #4]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6892      	ldr	r2, [r2, #8]
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68d2      	ldr	r2, [r2, #12]
 8003f50:	4311      	orrs	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6992      	ldr	r2, [r2, #24]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f62:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d161      	bne.n	8004030 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a38      	ldr	r2, [pc, #224]	; (8004050 <HAL_I2S_Init+0x274>)
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a37      	ldr	r2, [pc, #220]	; (8004054 <HAL_I2S_Init+0x278>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2S_Init+0x1a4>
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_I2S_Init+0x27c>)
 8003f7e:	e001      	b.n	8003f84 <HAL_I2S_Init+0x1a8>
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	4932      	ldr	r1, [pc, #200]	; (8004054 <HAL_I2S_Init+0x278>)
 8003f8c:	428a      	cmp	r2, r1
 8003f8e:	d101      	bne.n	8003f94 <HAL_I2S_Init+0x1b8>
 8003f90:	4a31      	ldr	r2, [pc, #196]	; (8004058 <HAL_I2S_Init+0x27c>)
 8003f92:	e001      	b.n	8003f98 <HAL_I2S_Init+0x1bc>
 8003f94:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f9c:	f023 030f 	bic.w	r3, r3, #15
 8003fa0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	; (8004054 <HAL_I2S_Init+0x278>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d101      	bne.n	8003fb0 <HAL_I2S_Init+0x1d4>
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_I2S_Init+0x27c>)
 8003fae:	e001      	b.n	8003fb4 <HAL_I2S_Init+0x1d8>
 8003fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a25      	ldr	r2, [pc, #148]	; (8004054 <HAL_I2S_Init+0x278>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2S_Init+0x1ea>
 8003fc2:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_I2S_Init+0x27c>)
 8003fc4:	e001      	b.n	8003fca <HAL_I2S_Init+0x1ee>
 8003fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd6:	d003      	beq.n	8003fe0 <HAL_I2S_Init+0x204>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	e001      	b.n	8003fec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004000:	4313      	orrs	r3, r2
 8004002:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800400a:	4313      	orrs	r3, r2
 800400c:	b29a      	uxth	r2, r3
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	4313      	orrs	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004018:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <HAL_I2S_Init+0x278>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_I2S_Init+0x24c>
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <HAL_I2S_Init+0x27c>)
 8004026:	e001      	b.n	800402c <HAL_I2S_Init+0x250>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402c:	897a      	ldrh	r2, [r7, #10]
 800402e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	08004361 	.word	0x08004361
 800404c:	cccccccd 	.word	0xcccccccd
 8004050:	08004475 	.word	0x08004475
 8004054:	40003800 	.word	0x40003800
 8004058:	40003400 	.word	0x40003400

0800405c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_I2S_Transmit_DMA+0x1a>
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e08e      	b.n	8004198 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_I2S_Transmit_DMA+0x2e>
 8004086:	2302      	movs	r3, #2
 8004088:	e086      	b.n	8004198 <HAL_I2S_Transmit_DMA+0x13c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d005      	beq.n	80040aa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	e076      	b.n	8004198 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2203      	movs	r2, #3
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d002      	beq.n	80040d6 <HAL_I2S_Transmit_DMA+0x7a>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d10a      	bne.n	80040ec <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ea:	e005      	b.n	80040f8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <HAL_I2S_Transmit_DMA+0x144>)
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <HAL_I2S_Transmit_DMA+0x148>)
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <HAL_I2S_Transmit_DMA+0x14c>)
 800410e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004118:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004120:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004128:	f7fe fa32 	bl	8002590 <HAL_DMA_Start_IT>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00f      	beq.n	8004152 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e022      	b.n	8004198 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d107      	bne.n	8004170 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800416e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0202 	orr.w	r2, r2, #2
 800418c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	0800423f 	.word	0x0800423f
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	0800425b 	.word	0x0800425b

080041ac <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10e      	bne.n	8004230 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0202 	bic.w	r2, r2, #2
 8004220:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ffc5 	bl	80041c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff ffad 	bl	80041ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0203 	bic.w	r2, r2, #3
 8004276:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	f043 0208 	orr.w	r2, r3, #8
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff ffa5 	bl	80041e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10e      	bne.n	80042fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff63 	bl	80041c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	b292      	uxth	r2, r2
 8004316:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	1c9a      	adds	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10e      	bne.n	8004358 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004348:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ff3e 	bl	80041d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b04      	cmp	r3, #4
 800437a:	d13a      	bne.n	80043f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d109      	bne.n	800439a <I2S_IRQHandler+0x3a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d102      	bne.n	800439a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ffb4 	bl	8004302 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d126      	bne.n	80043f2 <I2S_IRQHandler+0x92>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d11f      	bne.n	80043f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f043 0202 	orr.w	r2, r3, #2
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fefb 	bl	80041e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d136      	bne.n	800446c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d109      	bne.n	800441c <I2S_IRQHandler+0xbc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d102      	bne.n	800441c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ff45 	bl	80042a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b08      	cmp	r3, #8
 8004424:	d122      	bne.n	800446c <I2S_IRQHandler+0x10c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b20      	cmp	r3, #32
 8004432:	d11b      	bne.n	800446c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004442:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff febe 	bl	80041e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4aa2      	ldr	r2, [pc, #648]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800448e:	4ba2      	ldr	r3, [pc, #648]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004490:	e001      	b.n	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a9b      	ldr	r2, [pc, #620]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044ac:	4b9a      	ldr	r3, [pc, #616]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044ae:	e001      	b.n	80044b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d004      	beq.n	80044cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 8099 	bne.w	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d107      	bne.n	80044e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f925 	bl	8004730 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d107      	bne.n	8004500 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9c8 	bl	8004890 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d13a      	bne.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d035      	beq.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a7e      	ldr	r2, [pc, #504]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800451e:	4b7e      	ldr	r3, [pc, #504]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004520:	e001      	b.n	8004526 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004522:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4979      	ldr	r1, [pc, #484]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800452e:	428b      	cmp	r3, r1
 8004530:	d101      	bne.n	8004536 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004532:	4b79      	ldr	r3, [pc, #484]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004534:	e001      	b.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800453e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800454e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	f043 0202 	orr.w	r2, r3, #2
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fe34 	bl	80041e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b08      	cmp	r3, #8
 8004588:	f040 80be 	bne.w	8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80b8 	beq.w	8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a59      	ldr	r2, [pc, #356]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045b2:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045b4:	e001      	b.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4954      	ldr	r1, [pc, #336]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045c2:	428b      	cmp	r3, r1
 80045c4:	d101      	bne.n	80045ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045c6:	4b54      	ldr	r3, [pc, #336]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045c8:	e001      	b.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fdf6 	bl	80041e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045fc:	e084      	b.n	8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b02      	cmp	r3, #2
 8004606:	d107      	bne.n	8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8be 	bl	8004794 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	d107      	bne.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8fd 	bl	800482c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d12f      	bne.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02a      	beq.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004654:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2e      	ldr	r2, [pc, #184]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d101      	bne.n	8004664 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004662:	e001      	b.n	8004668 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004670:	428b      	cmp	r3, r1
 8004672:	d101      	bne.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004676:	e001      	b.n	800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004680:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	f043 0202 	orr.w	r2, r3, #2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fda6 	bl	80041e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d131      	bne.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02c      	beq.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a17      	ldr	r2, [pc, #92]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046bc:	e001      	b.n	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4912      	ldr	r1, [pc, #72]	; (8004714 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046ca:	428b      	cmp	r3, r1
 80046cc:	d101      	bne.n	80046d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046d0:	e001      	b.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80046d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff fd71 	bl	80041e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004706:	e000      	b.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004708:	bf00      	nop
}
 800470a:	bf00      	nop
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40003800 	.word	0x40003800
 8004718:	40003400 	.word	0x40003400

0800471c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c99      	adds	r1, r3, #2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6251      	str	r1, [r2, #36]	; 0x24
 8004742:	881a      	ldrh	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004770:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffc9 	bl	800471c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	1c99      	adds	r1, r3, #2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6251      	str	r1, [r2, #36]	; 0x24
 80047a6:	8819      	ldrh	r1, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <I2SEx_TxISR_I2SExt+0x90>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <I2SEx_TxISR_I2SExt+0x22>
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <I2SEx_TxISR_I2SExt+0x94>)
 80047b4:	e001      	b.n	80047ba <I2SEx_TxISR_I2SExt+0x26>
 80047b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ba:	460a      	mov	r2, r1
 80047bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d121      	bne.n	800481a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <I2SEx_TxISR_I2SExt+0x90>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <I2SEx_TxISR_I2SExt+0x50>
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <I2SEx_TxISR_I2SExt+0x94>)
 80047e2:	e001      	b.n	80047e8 <I2SEx_TxISR_I2SExt+0x54>
 80047e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	490d      	ldr	r1, [pc, #52]	; (8004824 <I2SEx_TxISR_I2SExt+0x90>)
 80047f0:	428b      	cmp	r3, r1
 80047f2:	d101      	bne.n	80047f8 <I2SEx_TxISR_I2SExt+0x64>
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <I2SEx_TxISR_I2SExt+0x94>)
 80047f6:	e001      	b.n	80047fc <I2SEx_TxISR_I2SExt+0x68>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004800:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff ff81 	bl	800471c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40003800 	.word	0x40003800
 8004828:	40003400 	.word	0x40003400

0800482c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68d8      	ldr	r0, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	1c99      	adds	r1, r3, #2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004844:	b282      	uxth	r2, r0
 8004846:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d113      	bne.n	8004888 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800486e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff4a 	bl	800471c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a20      	ldr	r2, [pc, #128]	; (8004920 <I2SEx_RxISR_I2SExt+0x90>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <I2SEx_RxISR_I2SExt+0x16>
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <I2SEx_RxISR_I2SExt+0x94>)
 80048a4:	e001      	b.n	80048aa <I2SEx_RxISR_I2SExt+0x1a>
 80048a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048aa:	68d8      	ldr	r0, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	1c99      	adds	r1, r3, #2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048b6:	b282      	uxth	r2, r0
 80048b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d121      	bne.n	8004916 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <I2SEx_RxISR_I2SExt+0x90>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <I2SEx_RxISR_I2SExt+0x50>
 80048dc:	4b11      	ldr	r3, [pc, #68]	; (8004924 <I2SEx_RxISR_I2SExt+0x94>)
 80048de:	e001      	b.n	80048e4 <I2SEx_RxISR_I2SExt+0x54>
 80048e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	490d      	ldr	r1, [pc, #52]	; (8004920 <I2SEx_RxISR_I2SExt+0x90>)
 80048ec:	428b      	cmp	r3, r1
 80048ee:	d101      	bne.n	80048f4 <I2SEx_RxISR_I2SExt+0x64>
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <I2SEx_RxISR_I2SExt+0x94>)
 80048f2:	e001      	b.n	80048f8 <I2SEx_RxISR_I2SExt+0x68>
 80048f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff03 	bl	800471c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40003800 	.word	0x40003800
 8004924:	40003400 	.word	0x40003400

08004928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e264      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d075      	beq.n	8004a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004946:	4ba3      	ldr	r3, [pc, #652]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b04      	cmp	r3, #4
 8004950:	d00c      	beq.n	800496c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004952:	4ba0      	ldr	r3, [pc, #640]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d112      	bne.n	8004984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495e:	4b9d      	ldr	r3, [pc, #628]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496a:	d10b      	bne.n	8004984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	4b99      	ldr	r3, [pc, #612]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05b      	beq.n	8004a30 <HAL_RCC_OscConfig+0x108>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d157      	bne.n	8004a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e23f      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d106      	bne.n	800499c <HAL_RCC_OscConfig+0x74>
 800498e:	4b91      	ldr	r3, [pc, #580]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a90      	ldr	r2, [pc, #576]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e01d      	b.n	80049d8 <HAL_RCC_OscConfig+0xb0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x98>
 80049a6:	4b8b      	ldr	r3, [pc, #556]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a8a      	ldr	r2, [pc, #552]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a87      	ldr	r2, [pc, #540]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e00b      	b.n	80049d8 <HAL_RCC_OscConfig+0xb0>
 80049c0:	4b84      	ldr	r3, [pc, #528]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a83      	ldr	r2, [pc, #524]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a80      	ldr	r2, [pc, #512]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fd fafe 	bl	8001fe0 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e8:	f7fd fafa 	bl	8001fe0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e204      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0xc0>
 8004a06:	e014      	b.n	8004a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fd faea 	bl	8001fe0 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a10:	f7fd fae6 	bl	8001fe0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1f0      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	4b6c      	ldr	r3, [pc, #432]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0xe8>
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d063      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3e:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4a:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d11c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a56:	4b5f      	ldr	r3, [pc, #380]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	4b5c      	ldr	r3, [pc, #368]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_RCC_OscConfig+0x152>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e1c4      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4952      	ldr	r1, [pc, #328]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8e:	e03a      	b.n	8004b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a98:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <HAL_RCC_OscConfig+0x2b0>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fd fa9f 	bl	8001fe0 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7fd fa9b 	bl	8001fe0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1a5      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	4b46      	ldr	r3, [pc, #280]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4940      	ldr	r1, [pc, #256]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	e015      	b.n	8004b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ada:	4b3f      	ldr	r3, [pc, #252]	; (8004bd8 <HAL_RCC_OscConfig+0x2b0>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fa7e 	bl	8001fe0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fd fa7a 	bl	8001fe0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e184      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d030      	beq.n	8004b74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d016      	beq.n	8004b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1a:	4b30      	ldr	r3, [pc, #192]	; (8004bdc <HAL_RCC_OscConfig+0x2b4>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fd fa5e 	bl	8001fe0 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fd fa5a 	bl	8001fe0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e164      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	4b26      	ldr	r3, [pc, #152]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x200>
 8004b46:	e015      	b.n	8004b74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b48:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <HAL_RCC_OscConfig+0x2b4>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fa47 	bl	8001fe0 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b56:	f7fd fa43 	bl	8001fe0 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e14d      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f0      	bne.n	8004b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a0 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10f      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_OscConfig+0x2b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d121      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCC_OscConfig+0x2b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <HAL_RCC_OscConfig+0x2b8>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bca:	f7fd fa09 	bl	8001fe0 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	e011      	b.n	8004bf6 <HAL_RCC_OscConfig+0x2ce>
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	42470000 	.word	0x42470000
 8004bdc:	42470e80 	.word	0x42470e80
 8004be0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be4:	f7fd f9fc 	bl	8001fe0 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e106      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf6:	4b85      	ldr	r3, [pc, #532]	; (8004e0c <HAL_RCC_OscConfig+0x4e4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d106      	bne.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
 8004c0a:	4b81      	ldr	r3, [pc, #516]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	4a80      	ldr	r2, [pc, #512]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6713      	str	r3, [r2, #112]	; 0x70
 8004c16:	e01c      	b.n	8004c52 <HAL_RCC_OscConfig+0x32a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b05      	cmp	r3, #5
 8004c1e:	d10c      	bne.n	8004c3a <HAL_RCC_OscConfig+0x312>
 8004c20:	4b7b      	ldr	r3, [pc, #492]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a7a      	ldr	r2, [pc, #488]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	4b78      	ldr	r3, [pc, #480]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a77      	ldr	r2, [pc, #476]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	e00b      	b.n	8004c52 <HAL_RCC_OscConfig+0x32a>
 8004c3a:	4b75      	ldr	r3, [pc, #468]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a74      	ldr	r2, [pc, #464]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70
 8004c46:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a71      	ldr	r2, [pc, #452]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d015      	beq.n	8004c86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fd f9c1 	bl	8001fe0 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd f9bd 	bl	8001fe0 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0c5      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c78:	4b65      	ldr	r3, [pc, #404]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ee      	beq.n	8004c62 <HAL_RCC_OscConfig+0x33a>
 8004c84:	e014      	b.n	8004cb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c86:	f7fd f9ab 	bl	8001fe0 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fd f9a7 	bl	8001fe0 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0af      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca4:	4b5a      	ldr	r3, [pc, #360]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ee      	bne.n	8004c8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb6:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a55      	ldr	r2, [pc, #340]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 809b 	beq.w	8004e02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ccc:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d05c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d141      	bne.n	8004d64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x4ec>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd f97b 	bl	8001fe0 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd f977 	bl	8001fe0 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e081      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	019b      	lsls	r3, r3, #6
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	4937      	ldr	r1, [pc, #220]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d36:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <HAL_RCC_OscConfig+0x4ec>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fd f950 	bl	8001fe0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd f94c 	bl	8001fe0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e056      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x41c>
 8004d62:	e04e      	b.n	8004e02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <HAL_RCC_OscConfig+0x4ec>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6a:	f7fd f939 	bl	8001fe0 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d72:	f7fd f935 	bl	8001fe0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e03f      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d84:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <HAL_RCC_OscConfig+0x44a>
 8004d90:	e037      	b.n	8004e02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e032      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <HAL_RCC_OscConfig+0x4e8>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d028      	beq.n	8004dfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d121      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d11a      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dce:	4013      	ands	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d111      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	3b01      	subs	r3, #1
 8004de8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	40023800 	.word	0x40023800
 8004e14:	42470060 	.word	0x42470060

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0cc      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90c      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0b8      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	494d      	ldr	r1, [pc, #308]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d044      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d119      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d003      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e067      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4934      	ldr	r1, [pc, #208]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f08:	f7fd f86a 	bl	8001fe0 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fd f866 	bl	8001fe0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e04f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d20c      	bcs.n	8004f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e032      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4916      	ldr	r1, [pc, #88]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f9e:	f000 f821 	bl	8004fe4 <HAL_RCC_GetSysClockFreq>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	490a      	ldr	r1, [pc, #40]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	5ccb      	ldrb	r3, [r1, r3]
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fc ffca 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023c00 	.word	0x40023c00
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	08006924 	.word	0x08006924
 8004fdc:	20000030 	.word	0x20000030
 8004fe0:	20000034 	.word	0x20000034

08004fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	607b      	str	r3, [r7, #4]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ffc:	4b67      	ldr	r3, [pc, #412]	; (800519c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b08      	cmp	r3, #8
 8005006:	d00d      	beq.n	8005024 <HAL_RCC_GetSysClockFreq+0x40>
 8005008:	2b08      	cmp	r3, #8
 800500a:	f200 80bd 	bhi.w	8005188 <HAL_RCC_GetSysClockFreq+0x1a4>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_RCC_GetSysClockFreq+0x34>
 8005012:	2b04      	cmp	r3, #4
 8005014:	d003      	beq.n	800501e <HAL_RCC_GetSysClockFreq+0x3a>
 8005016:	e0b7      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005018:	4b61      	ldr	r3, [pc, #388]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800501a:	60bb      	str	r3, [r7, #8]
       break;
 800501c:	e0b7      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800501e:	4b61      	ldr	r3, [pc, #388]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005020:	60bb      	str	r3, [r7, #8]
      break;
 8005022:	e0b4      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005024:	4b5d      	ldr	r3, [pc, #372]	; (800519c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800502c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800502e:	4b5b      	ldr	r3, [pc, #364]	; (800519c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d04d      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503a:	4b58      	ldr	r3, [pc, #352]	; (800519c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	461a      	mov	r2, r3
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	ea02 0800 	and.w	r8, r2, r0
 8005052:	ea03 0901 	and.w	r9, r3, r1
 8005056:	4640      	mov	r0, r8
 8005058:	4649      	mov	r1, r9
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	014b      	lsls	r3, r1, #5
 8005064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005068:	0142      	lsls	r2, r0, #5
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	ebb0 0008 	subs.w	r0, r0, r8
 8005072:	eb61 0109 	sbc.w	r1, r1, r9
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	018b      	lsls	r3, r1, #6
 8005080:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005084:	0182      	lsls	r2, r0, #6
 8005086:	1a12      	subs	r2, r2, r0
 8005088:	eb63 0301 	sbc.w	r3, r3, r1
 800508c:	f04f 0000 	mov.w	r0, #0
 8005090:	f04f 0100 	mov.w	r1, #0
 8005094:	00d9      	lsls	r1, r3, #3
 8005096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800509a:	00d0      	lsls	r0, r2, #3
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	eb12 0208 	adds.w	r2, r2, r8
 80050a4:	eb43 0309 	adc.w	r3, r3, r9
 80050a8:	f04f 0000 	mov.w	r0, #0
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	0259      	lsls	r1, r3, #9
 80050b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050b6:	0250      	lsls	r0, r2, #9
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	f7fb fbb4 	bl	8000834 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e04a      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d6:	4b31      	ldr	r3, [pc, #196]	; (800519c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	461a      	mov	r2, r3
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050e6:	f04f 0100 	mov.w	r1, #0
 80050ea:	ea02 0400 	and.w	r4, r2, r0
 80050ee:	ea03 0501 	and.w	r5, r3, r1
 80050f2:	4620      	mov	r0, r4
 80050f4:	4629      	mov	r1, r5
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	014b      	lsls	r3, r1, #5
 8005100:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005104:	0142      	lsls	r2, r0, #5
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	1b00      	subs	r0, r0, r4
 800510c:	eb61 0105 	sbc.w	r1, r1, r5
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	018b      	lsls	r3, r1, #6
 800511a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800511e:	0182      	lsls	r2, r0, #6
 8005120:	1a12      	subs	r2, r2, r0
 8005122:	eb63 0301 	sbc.w	r3, r3, r1
 8005126:	f04f 0000 	mov.w	r0, #0
 800512a:	f04f 0100 	mov.w	r1, #0
 800512e:	00d9      	lsls	r1, r3, #3
 8005130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005134:	00d0      	lsls	r0, r2, #3
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	1912      	adds	r2, r2, r4
 800513c:	eb45 0303 	adc.w	r3, r5, r3
 8005140:	f04f 0000 	mov.w	r0, #0
 8005144:	f04f 0100 	mov.w	r1, #0
 8005148:	0299      	lsls	r1, r3, #10
 800514a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800514e:	0290      	lsls	r0, r2, #10
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f7fb fb68 	bl	8000834 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	3301      	adds	r3, #1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	60bb      	str	r3, [r7, #8]
      break;
 8005186:	e002      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800518a:	60bb      	str	r3, [r7, #8]
      break;
 800518c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800518e:	68bb      	ldr	r3, [r7, #8]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	007a1200 	.word	0x007a1200

080051a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000030 	.word	0x20000030

080051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051c4:	f7ff fff0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0a9b      	lsrs	r3, r3, #10
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4903      	ldr	r1, [pc, #12]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40023800 	.word	0x40023800
 80051e4:	08006934 	.word	0x08006934

080051e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d035      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005210:	4b62      	ldr	r3, [pc, #392]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005216:	f7fc fee3 	bl	8001fe0 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800521e:	f7fc fedf 	bl	8001fe0 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0b0      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005230:	4b5b      	ldr	r3, [pc, #364]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	019a      	lsls	r2, r3, #6
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	071b      	lsls	r3, r3, #28
 8005248:	4955      	ldr	r1, [pc, #340]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005250:	4b52      	ldr	r3, [pc, #328]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005256:	f7fc fec3 	bl	8001fe0 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800525e:	f7fc febf 	bl	8001fe0 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e090      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005270:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8083 	beq.w	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	4b44      	ldr	r3, [pc, #272]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	4a43      	ldr	r2, [pc, #268]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	6413      	str	r3, [r2, #64]	; 0x40
 800529a:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3e      	ldr	r2, [pc, #248]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052b2:	f7fc fe95 	bl	8001fe0 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fc fe91 	bl	8001fe0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e062      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052cc:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052d8:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02f      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d028      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f6:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005300:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800530c:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005312:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d114      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800531e:	f7fc fe5f 	bl	8001fe0 <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005324:	e00a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005326:	f7fc fe5b 	bl	8001fe0 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e02a      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533c:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ee      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005354:	d10d      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536a:	490d      	ldr	r1, [pc, #52]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	608b      	str	r3, [r1, #8]
 8005370:	e005      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005378:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800537c:	6093      	str	r3, [r2, #8]
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538a:	4905      	ldr	r1, [pc, #20]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	42470068 	.word	0x42470068
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40007000 	.word	0x40007000
 80053a8:	42470e40 	.word	0x42470e40

080053ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d13e      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d12f      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053e2:	617b      	str	r3, [r7, #20]
          break;
 80053e4:	e02f      	b.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d108      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e007      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540e:	4a15      	ldr	r2, [pc, #84]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	099b      	lsrs	r3, r3, #6
 800541e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	fb02 f303 	mul.w	r3, r2, r3
 8005428:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005430:	0f1b      	lsrs	r3, r3, #28
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
          break;
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
          break;
 8005444:	bf00      	nop
        }
      }
      break;
 8005446:	bf00      	nop
    }
  }
  return frequency;
 8005448:	697b      	ldr	r3, [r7, #20]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800
 800545c:	00bb8000 	.word	0x00bb8000
 8005460:	007a1200 	.word	0x007a1200
 8005464:	00f42400 	.word	0x00f42400

08005468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e041      	b.n	80054fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc fc9e 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f000 fa96 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d001      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e04e      	b.n	80055be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a23      	ldr	r2, [pc, #140]	; (80055cc <HAL_TIM_Base_Start_IT+0xc4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d022      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d01d      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d018      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00e      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x80>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d111      	bne.n	80055ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b06      	cmp	r3, #6
 8005598:	d010      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	e007      	b.n	80055bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40000800 	.word	0x40000800
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	40010400 	.word	0x40010400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40001800 	.word	0x40001800

080055e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d122      	bne.n	8005644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d11b      	bne.n	8005644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0202 	mvn.w	r2, #2
 8005614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9b5 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9a7 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9b8 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b04      	cmp	r3, #4
 8005650:	d122      	bne.n	8005698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b04      	cmp	r3, #4
 800565e:	d11b      	bne.n	8005698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0204 	mvn.w	r2, #4
 8005668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f98b 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005684:	e005      	b.n	8005692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f97d 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f98e 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d122      	bne.n	80056ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d11b      	bne.n	80056ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0208 	mvn.w	r2, #8
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2204      	movs	r2, #4
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f961 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f953 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f964 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d122      	bne.n	8005740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	d11b      	bne.n	8005740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0210 	mvn.w	r2, #16
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2208      	movs	r2, #8
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f937 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f929 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f93a 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d10e      	bne.n	800576c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d107      	bne.n	800576c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0201 	mvn.w	r2, #1
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc f91a 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d10e      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d107      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fae0 	bl	8005d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8ff 	bl	80059c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d107      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0220 	mvn.w	r2, #32
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 faaa 	bl	8005d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIM_ConfigClockSource+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e0b4      	b.n	800597e <HAL_TIM_ConfigClockSource+0x186>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584c:	d03e      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0xd4>
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	f200 8087 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	f000 8086 	beq.w	800596a <HAL_TIM_ConfigClockSource+0x172>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d87f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b70      	cmp	r3, #112	; 0x70
 8005866:	d01a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xa6>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d87b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b60      	cmp	r3, #96	; 0x60
 800586e:	d050      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x11a>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d877      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d03c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d873      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d058      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x13a>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d86f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d064      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d86b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d060      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d867      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d05a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 800589c:	e062      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 f9ad 	bl	8005c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	609a      	str	r2, [r3, #8]
      break;
 80058ca:	e04f      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f000 f996 	bl	8005c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e03c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f90a 	bl	8005b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2150      	movs	r1, #80	; 0x50
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f963 	bl	8005bd6 <TIM_ITRx_SetConfig>
      break;
 8005910:	e02c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f929 	bl	8005b76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2160      	movs	r1, #96	; 0x60
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f953 	bl	8005bd6 <TIM_ITRx_SetConfig>
      break;
 8005930:	e01c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	461a      	mov	r2, r3
 8005940:	f000 f8ea 	bl	8005b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f943 	bl	8005bd6 <TIM_ITRx_SetConfig>
      break;
 8005950:	e00c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 f93a 	bl	8005bd6 <TIM_ITRx_SetConfig>
      break;
 8005962:	e003      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e000      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800596a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	; (8005aec <TIM_Base_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d00f      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02b      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d027      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d023      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01f      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01b      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d017      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <TIM_Base_SetConfig+0x134>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <TIM_Base_SetConfig+0x138>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <TIM_Base_SetConfig+0x13c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d108      	bne.n	8005a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40010400 	.word	0x40010400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800
 8005b0c:	40001800 	.word	0x40001800
 8005b10:	40001c00 	.word	0x40001c00
 8005b14:	40002000 	.word	0x40002000

08005b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f023 030a 	bic.w	r3, r3, #10
 8005b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b087      	sub	sp, #28
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0210 	bic.w	r2, r3, #16
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	031b      	lsls	r3, r3, #12
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f043 0307 	orr.w	r3, r3, #7
 8005bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	021a      	lsls	r2, r3, #8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	bf00      	nop
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e05a      	b.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d022      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d01d      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d018      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a17      	ldr	r2, [pc, #92]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10c      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40000c00 	.word	0x40000c00
 8005d38:	40010400 	.word	0x40010400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40001800 	.word	0x40001800

08005d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4d0d      	ldr	r5, [pc, #52]	; (8005da4 <__libc_init_array+0x38>)
 8005d70:	4c0d      	ldr	r4, [pc, #52]	; (8005da8 <__libc_init_array+0x3c>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	2600      	movs	r6, #0
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	4d0b      	ldr	r5, [pc, #44]	; (8005dac <__libc_init_array+0x40>)
 8005d7e:	4c0c      	ldr	r4, [pc, #48]	; (8005db0 <__libc_init_array+0x44>)
 8005d80:	f000 fdae 	bl	80068e0 <_init>
 8005d84:	1b64      	subs	r4, r4, r5
 8005d86:	10a4      	asrs	r4, r4, #2
 8005d88:	2600      	movs	r6, #0
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	08006d1c 	.word	0x08006d1c
 8005da8:	08006d1c 	.word	0x08006d1c
 8005dac:	08006d1c 	.word	0x08006d1c
 8005db0:	08006d20 	.word	0x08006d20

08005db4 <memcpy>:
 8005db4:	440a      	add	r2, r1
 8005db6:	4291      	cmp	r1, r2
 8005db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dbc:	d100      	bne.n	8005dc0 <memcpy+0xc>
 8005dbe:	4770      	bx	lr
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dca:	4291      	cmp	r1, r2
 8005dcc:	d1f9      	bne.n	8005dc2 <memcpy+0xe>
 8005dce:	bd10      	pop	{r4, pc}

08005dd0 <memset>:
 8005dd0:	4402      	add	r2, r0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d100      	bne.n	8005dda <memset+0xa>
 8005dd8:	4770      	bx	lr
 8005dda:	f803 1b01 	strb.w	r1, [r3], #1
 8005dde:	e7f9      	b.n	8005dd4 <memset+0x4>

08005de0 <strncat>:
 8005de0:	b530      	push	{r4, r5, lr}
 8005de2:	4604      	mov	r4, r0
 8005de4:	7825      	ldrb	r5, [r4, #0]
 8005de6:	4623      	mov	r3, r4
 8005de8:	3401      	adds	r4, #1
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	d1fa      	bne.n	8005de4 <strncat+0x4>
 8005dee:	3a01      	subs	r2, #1
 8005df0:	d304      	bcc.n	8005dfc <strncat+0x1c>
 8005df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df6:	f803 4b01 	strb.w	r4, [r3], #1
 8005dfa:	b904      	cbnz	r4, 8005dfe <strncat+0x1e>
 8005dfc:	bd30      	pop	{r4, r5, pc}
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	d1f5      	bne.n	8005dee <strncat+0xe>
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e7f3      	b.n	8005dee <strncat+0xe>
	...

08005e08 <sinf>:
 8005e08:	ee10 3a10 	vmov	r3, s0
 8005e0c:	b507      	push	{r0, r1, r2, lr}
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <sinf+0x7c>)
 8005e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	4293      	cmp	r3, r2
 8005e16:	dc05      	bgt.n	8005e24 <sinf+0x1c>
 8005e18:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005e88 <sinf+0x80>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f000 fc5b 	bl	80066d8 <__kernel_sinf>
 8005e22:	e004      	b.n	8005e2e <sinf+0x26>
 8005e24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005e28:	db04      	blt.n	8005e34 <sinf+0x2c>
 8005e2a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005e2e:	b003      	add	sp, #12
 8005e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e34:	4668      	mov	r0, sp
 8005e36:	f000 f829 	bl	8005e8c <__ieee754_rem_pio2f>
 8005e3a:	f000 0003 	and.w	r0, r0, #3
 8005e3e:	2801      	cmp	r0, #1
 8005e40:	d008      	beq.n	8005e54 <sinf+0x4c>
 8005e42:	2802      	cmp	r0, #2
 8005e44:	d00d      	beq.n	8005e62 <sinf+0x5a>
 8005e46:	b9b0      	cbnz	r0, 8005e76 <sinf+0x6e>
 8005e48:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e4c:	ed9d 0a00 	vldr	s0, [sp]
 8005e50:	2001      	movs	r0, #1
 8005e52:	e7e4      	b.n	8005e1e <sinf+0x16>
 8005e54:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e58:	ed9d 0a00 	vldr	s0, [sp]
 8005e5c:	f000 f952 	bl	8006104 <__kernel_cosf>
 8005e60:	e7e5      	b.n	8005e2e <sinf+0x26>
 8005e62:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e66:	ed9d 0a00 	vldr	s0, [sp]
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	f000 fc34 	bl	80066d8 <__kernel_sinf>
 8005e70:	eeb1 0a40 	vneg.f32	s0, s0
 8005e74:	e7db      	b.n	8005e2e <sinf+0x26>
 8005e76:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e7a:	ed9d 0a00 	vldr	s0, [sp]
 8005e7e:	f000 f941 	bl	8006104 <__kernel_cosf>
 8005e82:	e7f5      	b.n	8005e70 <sinf+0x68>
 8005e84:	3f490fd8 	.word	0x3f490fd8
 8005e88:	00000000 	.word	0x00000000

08005e8c <__ieee754_rem_pio2f>:
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	ee10 6a10 	vmov	r6, s0
 8005e92:	4b8e      	ldr	r3, [pc, #568]	; (80060cc <__ieee754_rem_pio2f+0x240>)
 8005e94:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005e98:	429d      	cmp	r5, r3
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	eef0 7a40 	vmov.f32	s15, s0
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	dc05      	bgt.n	8005eb0 <__ieee754_rem_pio2f+0x24>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	ed80 0a00 	vstr	s0, [r0]
 8005eaa:	6043      	str	r3, [r0, #4]
 8005eac:	2000      	movs	r0, #0
 8005eae:	e01a      	b.n	8005ee6 <__ieee754_rem_pio2f+0x5a>
 8005eb0:	4b87      	ldr	r3, [pc, #540]	; (80060d0 <__ieee754_rem_pio2f+0x244>)
 8005eb2:	429d      	cmp	r5, r3
 8005eb4:	dc46      	bgt.n	8005f44 <__ieee754_rem_pio2f+0xb8>
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80060d4 <__ieee754_rem_pio2f+0x248>
 8005ebc:	4b86      	ldr	r3, [pc, #536]	; (80060d8 <__ieee754_rem_pio2f+0x24c>)
 8005ebe:	f025 050f 	bic.w	r5, r5, #15
 8005ec2:	dd1f      	ble.n	8005f04 <__ieee754_rem_pio2f+0x78>
 8005ec4:	429d      	cmp	r5, r3
 8005ec6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005eca:	d00e      	beq.n	8005eea <__ieee754_rem_pio2f+0x5e>
 8005ecc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80060dc <__ieee754_rem_pio2f+0x250>
 8005ed0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005ed4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005ed8:	ed80 0a00 	vstr	s0, [r0]
 8005edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	edc4 7a01 	vstr	s15, [r4, #4]
 8005ee6:	b007      	add	sp, #28
 8005ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eea:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80060e0 <__ieee754_rem_pio2f+0x254>
 8005eee:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80060e4 <__ieee754_rem_pio2f+0x258>
 8005ef2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005ef6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005efa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005efe:	edc0 6a00 	vstr	s13, [r0]
 8005f02:	e7eb      	b.n	8005edc <__ieee754_rem_pio2f+0x50>
 8005f04:	429d      	cmp	r5, r3
 8005f06:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005f0a:	d00e      	beq.n	8005f2a <__ieee754_rem_pio2f+0x9e>
 8005f0c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80060dc <__ieee754_rem_pio2f+0x250>
 8005f10:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005f14:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005f18:	ed80 0a00 	vstr	s0, [r0]
 8005f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	edc4 7a01 	vstr	s15, [r4, #4]
 8005f28:	e7dd      	b.n	8005ee6 <__ieee754_rem_pio2f+0x5a>
 8005f2a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80060e0 <__ieee754_rem_pio2f+0x254>
 8005f2e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80060e4 <__ieee754_rem_pio2f+0x258>
 8005f32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005f36:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005f3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f3e:	edc0 6a00 	vstr	s13, [r0]
 8005f42:	e7eb      	b.n	8005f1c <__ieee754_rem_pio2f+0x90>
 8005f44:	4b68      	ldr	r3, [pc, #416]	; (80060e8 <__ieee754_rem_pio2f+0x25c>)
 8005f46:	429d      	cmp	r5, r3
 8005f48:	dc72      	bgt.n	8006030 <__ieee754_rem_pio2f+0x1a4>
 8005f4a:	f000 fc0d 	bl	8006768 <fabsf>
 8005f4e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80060ec <__ieee754_rem_pio2f+0x260>
 8005f52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005f56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f62:	ee17 0a90 	vmov	r0, s15
 8005f66:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80060d4 <__ieee754_rem_pio2f+0x248>
 8005f6a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005f6e:	281f      	cmp	r0, #31
 8005f70:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80060dc <__ieee754_rem_pio2f+0x250>
 8005f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f78:	eeb1 6a47 	vneg.f32	s12, s14
 8005f7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005f80:	ee16 2a90 	vmov	r2, s13
 8005f84:	dc1c      	bgt.n	8005fc0 <__ieee754_rem_pio2f+0x134>
 8005f86:	495a      	ldr	r1, [pc, #360]	; (80060f0 <__ieee754_rem_pio2f+0x264>)
 8005f88:	1e47      	subs	r7, r0, #1
 8005f8a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005f8e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005f92:	428b      	cmp	r3, r1
 8005f94:	d014      	beq.n	8005fc0 <__ieee754_rem_pio2f+0x134>
 8005f96:	6022      	str	r2, [r4, #0]
 8005f98:	ed94 7a00 	vldr	s14, [r4]
 8005f9c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005fa6:	ed84 0a01 	vstr	s0, [r4, #4]
 8005faa:	da9c      	bge.n	8005ee6 <__ieee754_rem_pio2f+0x5a>
 8005fac:	eeb1 7a47 	vneg.f32	s14, s14
 8005fb0:	eeb1 0a40 	vneg.f32	s0, s0
 8005fb4:	ed84 7a00 	vstr	s14, [r4]
 8005fb8:	ed84 0a01 	vstr	s0, [r4, #4]
 8005fbc:	4240      	negs	r0, r0
 8005fbe:	e792      	b.n	8005ee6 <__ieee754_rem_pio2f+0x5a>
 8005fc0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005fc4:	15eb      	asrs	r3, r5, #23
 8005fc6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8005fca:	2d08      	cmp	r5, #8
 8005fcc:	dde3      	ble.n	8005f96 <__ieee754_rem_pio2f+0x10a>
 8005fce:	eddf 7a44 	vldr	s15, [pc, #272]	; 80060e0 <__ieee754_rem_pio2f+0x254>
 8005fd2:	eef0 6a40 	vmov.f32	s13, s0
 8005fd6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005fda:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005fde:	eea6 0a27 	vfma.f32	s0, s12, s15
 8005fe2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80060e4 <__ieee754_rem_pio2f+0x258>
 8005fe6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8005fea:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005fee:	eef0 7a40 	vmov.f32	s15, s0
 8005ff2:	ee15 2a90 	vmov	r2, s11
 8005ff6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005ffa:	1a5b      	subs	r3, r3, r1
 8005ffc:	2b19      	cmp	r3, #25
 8005ffe:	dc04      	bgt.n	800600a <__ieee754_rem_pio2f+0x17e>
 8006000:	edc4 5a00 	vstr	s11, [r4]
 8006004:	eeb0 0a66 	vmov.f32	s0, s13
 8006008:	e7c6      	b.n	8005f98 <__ieee754_rem_pio2f+0x10c>
 800600a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80060f4 <__ieee754_rem_pio2f+0x268>
 800600e:	eeb0 0a66 	vmov.f32	s0, s13
 8006012:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006016:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800601a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80060f8 <__ieee754_rem_pio2f+0x26c>
 800601e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006022:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006026:	ee30 7a67 	vsub.f32	s14, s0, s15
 800602a:	ed84 7a00 	vstr	s14, [r4]
 800602e:	e7b3      	b.n	8005f98 <__ieee754_rem_pio2f+0x10c>
 8006030:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006034:	db06      	blt.n	8006044 <__ieee754_rem_pio2f+0x1b8>
 8006036:	ee70 7a40 	vsub.f32	s15, s0, s0
 800603a:	edc0 7a01 	vstr	s15, [r0, #4]
 800603e:	edc0 7a00 	vstr	s15, [r0]
 8006042:	e733      	b.n	8005eac <__ieee754_rem_pio2f+0x20>
 8006044:	15ea      	asrs	r2, r5, #23
 8006046:	3a86      	subs	r2, #134	; 0x86
 8006048:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006054:	eddf 6a29 	vldr	s13, [pc, #164]	; 80060fc <__ieee754_rem_pio2f+0x270>
 8006058:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800605c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006060:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006068:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800606c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006074:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006078:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800607c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006084:	edcd 7a05 	vstr	s15, [sp, #20]
 8006088:	d11e      	bne.n	80060c8 <__ieee754_rem_pio2f+0x23c>
 800608a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800608e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006092:	bf14      	ite	ne
 8006094:	2302      	movne	r3, #2
 8006096:	2301      	moveq	r3, #1
 8006098:	4919      	ldr	r1, [pc, #100]	; (8006100 <__ieee754_rem_pio2f+0x274>)
 800609a:	9101      	str	r1, [sp, #4]
 800609c:	2102      	movs	r1, #2
 800609e:	9100      	str	r1, [sp, #0]
 80060a0:	a803      	add	r0, sp, #12
 80060a2:	4621      	mov	r1, r4
 80060a4:	f000 f88e 	bl	80061c4 <__kernel_rem_pio2f>
 80060a8:	2e00      	cmp	r6, #0
 80060aa:	f6bf af1c 	bge.w	8005ee6 <__ieee754_rem_pio2f+0x5a>
 80060ae:	edd4 7a00 	vldr	s15, [r4]
 80060b2:	eef1 7a67 	vneg.f32	s15, s15
 80060b6:	edc4 7a00 	vstr	s15, [r4]
 80060ba:	edd4 7a01 	vldr	s15, [r4, #4]
 80060be:	eef1 7a67 	vneg.f32	s15, s15
 80060c2:	edc4 7a01 	vstr	s15, [r4, #4]
 80060c6:	e779      	b.n	8005fbc <__ieee754_rem_pio2f+0x130>
 80060c8:	2303      	movs	r3, #3
 80060ca:	e7e5      	b.n	8006098 <__ieee754_rem_pio2f+0x20c>
 80060cc:	3f490fd8 	.word	0x3f490fd8
 80060d0:	4016cbe3 	.word	0x4016cbe3
 80060d4:	3fc90f80 	.word	0x3fc90f80
 80060d8:	3fc90fd0 	.word	0x3fc90fd0
 80060dc:	37354443 	.word	0x37354443
 80060e0:	37354400 	.word	0x37354400
 80060e4:	2e85a308 	.word	0x2e85a308
 80060e8:	43490f80 	.word	0x43490f80
 80060ec:	3f22f984 	.word	0x3f22f984
 80060f0:	08006944 	.word	0x08006944
 80060f4:	2e85a300 	.word	0x2e85a300
 80060f8:	248d3132 	.word	0x248d3132
 80060fc:	43800000 	.word	0x43800000
 8006100:	080069c4 	.word	0x080069c4

08006104 <__kernel_cosf>:
 8006104:	ee10 3a10 	vmov	r3, s0
 8006108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800610c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006110:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006114:	da05      	bge.n	8006122 <__kernel_cosf+0x1e>
 8006116:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800611a:	ee17 2a90 	vmov	r2, s15
 800611e:	2a00      	cmp	r2, #0
 8006120:	d03d      	beq.n	800619e <__kernel_cosf+0x9a>
 8006122:	ee60 5a00 	vmul.f32	s11, s0, s0
 8006126:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80061a4 <__kernel_cosf+0xa0>
 800612a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80061a8 <__kernel_cosf+0xa4>
 800612e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80061ac <__kernel_cosf+0xa8>
 8006132:	4a1f      	ldr	r2, [pc, #124]	; (80061b0 <__kernel_cosf+0xac>)
 8006134:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006138:	4293      	cmp	r3, r2
 800613a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80061b4 <__kernel_cosf+0xb0>
 800613e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006142:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80061b8 <__kernel_cosf+0xb4>
 8006146:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800614a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80061bc <__kernel_cosf+0xb8>
 800614e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006152:	eeb0 7a66 	vmov.f32	s14, s13
 8006156:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800615a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800615e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8006162:	ee67 6a25 	vmul.f32	s13, s14, s11
 8006166:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800616a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800616e:	dc04      	bgt.n	800617a <__kernel_cosf+0x76>
 8006170:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006174:	ee36 0a47 	vsub.f32	s0, s12, s14
 8006178:	4770      	bx	lr
 800617a:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <__kernel_cosf+0xbc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	bfda      	itte	le
 8006180:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8006184:	ee06 3a90 	vmovle	s13, r3
 8006188:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800618c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006190:	ee36 0a66 	vsub.f32	s0, s12, s13
 8006194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006198:	ee30 0a67 	vsub.f32	s0, s0, s15
 800619c:	4770      	bx	lr
 800619e:	eeb0 0a46 	vmov.f32	s0, s12
 80061a2:	4770      	bx	lr
 80061a4:	ad47d74e 	.word	0xad47d74e
 80061a8:	310f74f6 	.word	0x310f74f6
 80061ac:	3d2aaaab 	.word	0x3d2aaaab
 80061b0:	3e999999 	.word	0x3e999999
 80061b4:	b493f27c 	.word	0xb493f27c
 80061b8:	37d00d01 	.word	0x37d00d01
 80061bc:	bab60b61 	.word	0xbab60b61
 80061c0:	3f480000 	.word	0x3f480000

080061c4 <__kernel_rem_pio2f>:
 80061c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c8:	ed2d 8b04 	vpush	{d8-d9}
 80061cc:	b0d7      	sub	sp, #348	; 0x15c
 80061ce:	4616      	mov	r6, r2
 80061d0:	4698      	mov	r8, r3
 80061d2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80061d4:	4bbb      	ldr	r3, [pc, #748]	; (80064c4 <__kernel_rem_pio2f+0x300>)
 80061d6:	9001      	str	r0, [sp, #4]
 80061d8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80061dc:	1d33      	adds	r3, r6, #4
 80061de:	460d      	mov	r5, r1
 80061e0:	f108 39ff 	add.w	r9, r8, #4294967295
 80061e4:	db29      	blt.n	800623a <__kernel_rem_pio2f+0x76>
 80061e6:	1ef1      	subs	r1, r6, #3
 80061e8:	bf48      	it	mi
 80061ea:	1d31      	addmi	r1, r6, #4
 80061ec:	10c9      	asrs	r1, r1, #3
 80061ee:	1c4c      	adds	r4, r1, #1
 80061f0:	00e3      	lsls	r3, r4, #3
 80061f2:	9302      	str	r3, [sp, #8]
 80061f4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80061f6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80064d4 <__kernel_rem_pio2f+0x310>
 80061fa:	eba1 0009 	sub.w	r0, r1, r9
 80061fe:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8006202:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8006206:	eb07 0c09 	add.w	ip, r7, r9
 800620a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800620e:	2300      	movs	r3, #0
 8006210:	4563      	cmp	r3, ip
 8006212:	dd14      	ble.n	800623e <__kernel_rem_pio2f+0x7a>
 8006214:	ab1a      	add	r3, sp, #104	; 0x68
 8006216:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800621a:	46cc      	mov	ip, r9
 800621c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8006220:	f1c8 0b01 	rsb	fp, r8, #1
 8006224:	eb0b 020c 	add.w	r2, fp, ip
 8006228:	4297      	cmp	r7, r2
 800622a:	db27      	blt.n	800627c <__kernel_rem_pio2f+0xb8>
 800622c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006230:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80064d4 <__kernel_rem_pio2f+0x310>
 8006234:	4618      	mov	r0, r3
 8006236:	2200      	movs	r2, #0
 8006238:	e016      	b.n	8006268 <__kernel_rem_pio2f+0xa4>
 800623a:	2100      	movs	r1, #0
 800623c:	e7d7      	b.n	80061ee <__kernel_rem_pio2f+0x2a>
 800623e:	42d8      	cmn	r0, r3
 8006240:	bf5d      	ittte	pl
 8006242:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8006246:	ee07 2a90 	vmovpl	s15, r2
 800624a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800624e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006252:	ecea 7a01 	vstmia	sl!, {s15}
 8006256:	3301      	adds	r3, #1
 8006258:	e7da      	b.n	8006210 <__kernel_rem_pio2f+0x4c>
 800625a:	ecfe 6a01 	vldmia	lr!, {s13}
 800625e:	ed90 7a00 	vldr	s14, [r0]
 8006262:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006266:	3201      	adds	r2, #1
 8006268:	454a      	cmp	r2, r9
 800626a:	f1a0 0004 	sub.w	r0, r0, #4
 800626e:	ddf4      	ble.n	800625a <__kernel_rem_pio2f+0x96>
 8006270:	ecea 7a01 	vstmia	sl!, {s15}
 8006274:	3304      	adds	r3, #4
 8006276:	f10c 0c01 	add.w	ip, ip, #1
 800627a:	e7d3      	b.n	8006224 <__kernel_rem_pio2f+0x60>
 800627c:	ab06      	add	r3, sp, #24
 800627e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8006286:	eddf 8a92 	vldr	s17, [pc, #584]	; 80064d0 <__kernel_rem_pio2f+0x30c>
 800628a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80064cc <__kernel_rem_pio2f+0x308>
 800628e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	46ba      	mov	sl, r7
 8006296:	ab56      	add	r3, sp, #344	; 0x158
 8006298:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800629c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80062a0:	ab06      	add	r3, sp, #24
 80062a2:	4618      	mov	r0, r3
 80062a4:	4652      	mov	r2, sl
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	dc51      	bgt.n	800634e <__kernel_rem_pio2f+0x18a>
 80062aa:	4620      	mov	r0, r4
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	f000 faa5 	bl	80067fc <scalbnf>
 80062b2:	eeb0 8a40 	vmov.f32	s16, s0
 80062b6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80062ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 80062be:	f000 fa5b 	bl	8006778 <floorf>
 80062c2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80062c6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80062ca:	2c00      	cmp	r4, #0
 80062cc:	9b05      	ldr	r3, [sp, #20]
 80062ce:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80062d2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80062d6:	edcd 7a00 	vstr	s15, [sp]
 80062da:	ee38 8a40 	vsub.f32	s16, s16, s0
 80062de:	dd4b      	ble.n	8006378 <__kernel_rem_pio2f+0x1b4>
 80062e0:	f10a 3cff 	add.w	ip, sl, #4294967295
 80062e4:	aa06      	add	r2, sp, #24
 80062e6:	f1c4 0e08 	rsb	lr, r4, #8
 80062ea:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80062ee:	ee17 1a90 	vmov	r1, s15
 80062f2:	fa42 f00e 	asr.w	r0, r2, lr
 80062f6:	4401      	add	r1, r0
 80062f8:	9100      	str	r1, [sp, #0]
 80062fa:	fa00 f00e 	lsl.w	r0, r0, lr
 80062fe:	a906      	add	r1, sp, #24
 8006300:	1a12      	subs	r2, r2, r0
 8006302:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8006306:	f1c4 0007 	rsb	r0, r4, #7
 800630a:	fa42 fb00 	asr.w	fp, r2, r0
 800630e:	f1bb 0f00 	cmp.w	fp, #0
 8006312:	dd43      	ble.n	800639c <__kernel_rem_pio2f+0x1d8>
 8006314:	9a00      	ldr	r2, [sp, #0]
 8006316:	f04f 0e00 	mov.w	lr, #0
 800631a:	3201      	adds	r2, #1
 800631c:	9200      	str	r2, [sp, #0]
 800631e:	4670      	mov	r0, lr
 8006320:	45f2      	cmp	sl, lr
 8006322:	dc6c      	bgt.n	80063fe <__kernel_rem_pio2f+0x23a>
 8006324:	2c00      	cmp	r4, #0
 8006326:	dd04      	ble.n	8006332 <__kernel_rem_pio2f+0x16e>
 8006328:	2c01      	cmp	r4, #1
 800632a:	d079      	beq.n	8006420 <__kernel_rem_pio2f+0x25c>
 800632c:	2c02      	cmp	r4, #2
 800632e:	f000 8082 	beq.w	8006436 <__kernel_rem_pio2f+0x272>
 8006332:	f1bb 0f02 	cmp.w	fp, #2
 8006336:	d131      	bne.n	800639c <__kernel_rem_pio2f+0x1d8>
 8006338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800633c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006340:	b360      	cbz	r0, 800639c <__kernel_rem_pio2f+0x1d8>
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fa5a 	bl	80067fc <scalbnf>
 8006348:	ee38 8a40 	vsub.f32	s16, s16, s0
 800634c:	e026      	b.n	800639c <__kernel_rem_pio2f+0x1d8>
 800634e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006352:	3a01      	subs	r2, #1
 8006354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006358:	a942      	add	r1, sp, #264	; 0x108
 800635a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800635e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8006362:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006366:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800636a:	eca0 0a01 	vstmia	r0!, {s0}
 800636e:	ed9c 0a00 	vldr	s0, [ip]
 8006372:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006376:	e796      	b.n	80062a6 <__kernel_rem_pio2f+0xe2>
 8006378:	d107      	bne.n	800638a <__kernel_rem_pio2f+0x1c6>
 800637a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800637e:	a906      	add	r1, sp, #24
 8006380:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006384:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8006388:	e7c1      	b.n	800630e <__kernel_rem_pio2f+0x14a>
 800638a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800638e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006396:	da2f      	bge.n	80063f8 <__kernel_rem_pio2f+0x234>
 8006398:	f04f 0b00 	mov.w	fp, #0
 800639c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	f040 8098 	bne.w	80064d8 <__kernel_rem_pio2f+0x314>
 80063a8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80063ac:	469c      	mov	ip, r3
 80063ae:	2200      	movs	r2, #0
 80063b0:	45bc      	cmp	ip, r7
 80063b2:	da48      	bge.n	8006446 <__kernel_rem_pio2f+0x282>
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d05f      	beq.n	8006478 <__kernel_rem_pio2f+0x2b4>
 80063b8:	aa06      	add	r2, sp, #24
 80063ba:	3c08      	subs	r4, #8
 80063bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d07d      	beq.n	80064c0 <__kernel_rem_pio2f+0x2fc>
 80063c4:	4620      	mov	r0, r4
 80063c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	f000 fa16 	bl	80067fc <scalbnf>
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80064d0 <__kernel_rem_pio2f+0x30c>
 80063d6:	4619      	mov	r1, r3
 80063d8:	2900      	cmp	r1, #0
 80063da:	f280 80af 	bge.w	800653c <__kernel_rem_pio2f+0x378>
 80063de:	4618      	mov	r0, r3
 80063e0:	2400      	movs	r4, #0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f2c0 80d0 	blt.w	8006588 <__kernel_rem_pio2f+0x3c4>
 80063e8:	a942      	add	r1, sp, #264	; 0x108
 80063ea:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80063ee:	4a36      	ldr	r2, [pc, #216]	; (80064c8 <__kernel_rem_pio2f+0x304>)
 80063f0:	eddf 7a38 	vldr	s15, [pc, #224]	; 80064d4 <__kernel_rem_pio2f+0x310>
 80063f4:	2100      	movs	r1, #0
 80063f6:	e0bb      	b.n	8006570 <__kernel_rem_pio2f+0x3ac>
 80063f8:	f04f 0b02 	mov.w	fp, #2
 80063fc:	e78a      	b.n	8006314 <__kernel_rem_pio2f+0x150>
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	b948      	cbnz	r0, 8006416 <__kernel_rem_pio2f+0x252>
 8006402:	b11a      	cbz	r2, 800640c <__kernel_rem_pio2f+0x248>
 8006404:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	2201      	movs	r2, #1
 800640c:	f10e 0e01 	add.w	lr, lr, #1
 8006410:	3304      	adds	r3, #4
 8006412:	4610      	mov	r0, r2
 8006414:	e784      	b.n	8006320 <__kernel_rem_pio2f+0x15c>
 8006416:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	4602      	mov	r2, r0
 800641e:	e7f5      	b.n	800640c <__kernel_rem_pio2f+0x248>
 8006420:	f10a 3cff 	add.w	ip, sl, #4294967295
 8006424:	ab06      	add	r3, sp, #24
 8006426:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	aa06      	add	r2, sp, #24
 8006430:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8006434:	e77d      	b.n	8006332 <__kernel_rem_pio2f+0x16e>
 8006436:	f10a 3cff 	add.w	ip, sl, #4294967295
 800643a:	ab06      	add	r3, sp, #24
 800643c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8006440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006444:	e7f3      	b.n	800642e <__kernel_rem_pio2f+0x26a>
 8006446:	a906      	add	r1, sp, #24
 8006448:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800644c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006450:	4302      	orrs	r2, r0
 8006452:	e7ad      	b.n	80063b0 <__kernel_rem_pio2f+0x1ec>
 8006454:	3001      	adds	r0, #1
 8006456:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800645a:	2a00      	cmp	r2, #0
 800645c:	d0fa      	beq.n	8006454 <__kernel_rem_pio2f+0x290>
 800645e:	a91a      	add	r1, sp, #104	; 0x68
 8006460:	eb0a 0208 	add.w	r2, sl, r8
 8006464:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006468:	f10a 0301 	add.w	r3, sl, #1
 800646c:	eb0a 0100 	add.w	r1, sl, r0
 8006470:	4299      	cmp	r1, r3
 8006472:	da04      	bge.n	800647e <__kernel_rem_pio2f+0x2ba>
 8006474:	468a      	mov	sl, r1
 8006476:	e70e      	b.n	8006296 <__kernel_rem_pio2f+0xd2>
 8006478:	9b04      	ldr	r3, [sp, #16]
 800647a:	2001      	movs	r0, #1
 800647c:	e7eb      	b.n	8006456 <__kernel_rem_pio2f+0x292>
 800647e:	9803      	ldr	r0, [sp, #12]
 8006480:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006484:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006488:	9000      	str	r0, [sp, #0]
 800648a:	ee07 0a90 	vmov	s15, r0
 800648e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006492:	2000      	movs	r0, #0
 8006494:	ece2 7a01 	vstmia	r2!, {s15}
 8006498:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80064d4 <__kernel_rem_pio2f+0x310>
 800649c:	4696      	mov	lr, r2
 800649e:	4548      	cmp	r0, r9
 80064a0:	dd06      	ble.n	80064b0 <__kernel_rem_pio2f+0x2ec>
 80064a2:	a842      	add	r0, sp, #264	; 0x108
 80064a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80064a8:	edc0 7a00 	vstr	s15, [r0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	e7df      	b.n	8006470 <__kernel_rem_pio2f+0x2ac>
 80064b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80064b4:	ed3e 7a01 	vldmdb	lr!, {s14}
 80064b8:	3001      	adds	r0, #1
 80064ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80064be:	e7ee      	b.n	800649e <__kernel_rem_pio2f+0x2da>
 80064c0:	3b01      	subs	r3, #1
 80064c2:	e779      	b.n	80063b8 <__kernel_rem_pio2f+0x1f4>
 80064c4:	08006d08 	.word	0x08006d08
 80064c8:	08006cdc 	.word	0x08006cdc
 80064cc:	43800000 	.word	0x43800000
 80064d0:	3b800000 	.word	0x3b800000
 80064d4:	00000000 	.word	0x00000000
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	eeb0 0a48 	vmov.f32	s0, s16
 80064de:	1b98      	subs	r0, r3, r6
 80064e0:	f000 f98c 	bl	80067fc <scalbnf>
 80064e4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80064cc <__kernel_rem_pio2f+0x308>
 80064e8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	db1b      	blt.n	800652a <__kernel_rem_pio2f+0x366>
 80064f2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80064d0 <__kernel_rem_pio2f+0x30c>
 80064f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80064fa:	aa06      	add	r2, sp, #24
 80064fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006500:	a906      	add	r1, sp, #24
 8006502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006506:	3408      	adds	r4, #8
 8006508:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800650c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006510:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006514:	ee10 3a10 	vmov	r3, s0
 8006518:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800651c:	ee17 2a90 	vmov	r2, s15
 8006520:	f10a 0301 	add.w	r3, sl, #1
 8006524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006528:	e74c      	b.n	80063c4 <__kernel_rem_pio2f+0x200>
 800652a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800652e:	aa06      	add	r2, sp, #24
 8006530:	ee10 3a10 	vmov	r3, s0
 8006534:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8006538:	4653      	mov	r3, sl
 800653a:	e743      	b.n	80063c4 <__kernel_rem_pio2f+0x200>
 800653c:	aa42      	add	r2, sp, #264	; 0x108
 800653e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8006542:	aa06      	add	r2, sp, #24
 8006544:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006548:	9201      	str	r2, [sp, #4]
 800654a:	ee07 2a90 	vmov	s15, r2
 800654e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006552:	3901      	subs	r1, #1
 8006554:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006558:	ee20 0a07 	vmul.f32	s0, s0, s14
 800655c:	edc0 7a00 	vstr	s15, [r0]
 8006560:	e73a      	b.n	80063d8 <__kernel_rem_pio2f+0x214>
 8006562:	ecf2 6a01 	vldmia	r2!, {s13}
 8006566:	ecb6 7a01 	vldmia	r6!, {s14}
 800656a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800656e:	3101      	adds	r1, #1
 8006570:	42b9      	cmp	r1, r7
 8006572:	dc01      	bgt.n	8006578 <__kernel_rem_pio2f+0x3b4>
 8006574:	428c      	cmp	r4, r1
 8006576:	daf4      	bge.n	8006562 <__kernel_rem_pio2f+0x39e>
 8006578:	aa56      	add	r2, sp, #344	; 0x158
 800657a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800657e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8006582:	3801      	subs	r0, #1
 8006584:	3401      	adds	r4, #1
 8006586:	e72c      	b.n	80063e2 <__kernel_rem_pio2f+0x21e>
 8006588:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800658a:	2a02      	cmp	r2, #2
 800658c:	dc0a      	bgt.n	80065a4 <__kernel_rem_pio2f+0x3e0>
 800658e:	2a00      	cmp	r2, #0
 8006590:	dc61      	bgt.n	8006656 <__kernel_rem_pio2f+0x492>
 8006592:	d03c      	beq.n	800660e <__kernel_rem_pio2f+0x44a>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	f003 0007 	and.w	r0, r3, #7
 800659a:	b057      	add	sp, #348	; 0x15c
 800659c:	ecbd 8b04 	vpop	{d8-d9}
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80065a6:	2a03      	cmp	r2, #3
 80065a8:	d1f4      	bne.n	8006594 <__kernel_rem_pio2f+0x3d0>
 80065aa:	aa2e      	add	r2, sp, #184	; 0xb8
 80065ac:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80065b0:	4608      	mov	r0, r1
 80065b2:	461c      	mov	r4, r3
 80065b4:	2c00      	cmp	r4, #0
 80065b6:	f1a0 0004 	sub.w	r0, r0, #4
 80065ba:	dc59      	bgt.n	8006670 <__kernel_rem_pio2f+0x4ac>
 80065bc:	4618      	mov	r0, r3
 80065be:	2801      	cmp	r0, #1
 80065c0:	f1a1 0104 	sub.w	r1, r1, #4
 80065c4:	dc64      	bgt.n	8006690 <__kernel_rem_pio2f+0x4cc>
 80065c6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80064d4 <__kernel_rem_pio2f+0x310>
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	dc70      	bgt.n	80066b0 <__kernel_rem_pio2f+0x4ec>
 80065ce:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80065d2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80065d6:	f1bb 0f00 	cmp.w	fp, #0
 80065da:	d172      	bne.n	80066c2 <__kernel_rem_pio2f+0x4fe>
 80065dc:	edc5 6a00 	vstr	s13, [r5]
 80065e0:	ed85 7a01 	vstr	s14, [r5, #4]
 80065e4:	edc5 7a02 	vstr	s15, [r5, #8]
 80065e8:	e7d4      	b.n	8006594 <__kernel_rem_pio2f+0x3d0>
 80065ea:	aa2e      	add	r2, sp, #184	; 0xb8
 80065ec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80065f0:	ed91 7a00 	vldr	s14, [r1]
 80065f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065f8:	3b01      	subs	r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	daf5      	bge.n	80065ea <__kernel_rem_pio2f+0x426>
 80065fe:	f1bb 0f00 	cmp.w	fp, #0
 8006602:	d001      	beq.n	8006608 <__kernel_rem_pio2f+0x444>
 8006604:	eef1 7a67 	vneg.f32	s15, s15
 8006608:	edc5 7a00 	vstr	s15, [r5]
 800660c:	e7c2      	b.n	8006594 <__kernel_rem_pio2f+0x3d0>
 800660e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80064d4 <__kernel_rem_pio2f+0x310>
 8006612:	e7f2      	b.n	80065fa <__kernel_rem_pio2f+0x436>
 8006614:	aa2e      	add	r2, sp, #184	; 0xb8
 8006616:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800661a:	edd0 7a00 	vldr	s15, [r0]
 800661e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006622:	3901      	subs	r1, #1
 8006624:	2900      	cmp	r1, #0
 8006626:	daf5      	bge.n	8006614 <__kernel_rem_pio2f+0x450>
 8006628:	f1bb 0f00 	cmp.w	fp, #0
 800662c:	d017      	beq.n	800665e <__kernel_rem_pio2f+0x49a>
 800662e:	eef1 7a47 	vneg.f32	s15, s14
 8006632:	edc5 7a00 	vstr	s15, [r5]
 8006636:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800663a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800663e:	a82f      	add	r0, sp, #188	; 0xbc
 8006640:	2101      	movs	r1, #1
 8006642:	428b      	cmp	r3, r1
 8006644:	da0e      	bge.n	8006664 <__kernel_rem_pio2f+0x4a0>
 8006646:	f1bb 0f00 	cmp.w	fp, #0
 800664a:	d001      	beq.n	8006650 <__kernel_rem_pio2f+0x48c>
 800664c:	eef1 7a67 	vneg.f32	s15, s15
 8006650:	edc5 7a01 	vstr	s15, [r5, #4]
 8006654:	e79e      	b.n	8006594 <__kernel_rem_pio2f+0x3d0>
 8006656:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80064d4 <__kernel_rem_pio2f+0x310>
 800665a:	4619      	mov	r1, r3
 800665c:	e7e2      	b.n	8006624 <__kernel_rem_pio2f+0x460>
 800665e:	eef0 7a47 	vmov.f32	s15, s14
 8006662:	e7e6      	b.n	8006632 <__kernel_rem_pio2f+0x46e>
 8006664:	ecb0 7a01 	vldmia	r0!, {s14}
 8006668:	3101      	adds	r1, #1
 800666a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800666e:	e7e8      	b.n	8006642 <__kernel_rem_pio2f+0x47e>
 8006670:	edd0 7a00 	vldr	s15, [r0]
 8006674:	edd0 6a01 	vldr	s13, [r0, #4]
 8006678:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800667c:	3c01      	subs	r4, #1
 800667e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006682:	ed80 7a00 	vstr	s14, [r0]
 8006686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668a:	edc0 7a01 	vstr	s15, [r0, #4]
 800668e:	e791      	b.n	80065b4 <__kernel_rem_pio2f+0x3f0>
 8006690:	edd1 7a00 	vldr	s15, [r1]
 8006694:	edd1 6a01 	vldr	s13, [r1, #4]
 8006698:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800669c:	3801      	subs	r0, #1
 800669e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066a2:	ed81 7a00 	vstr	s14, [r1]
 80066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066aa:	edc1 7a01 	vstr	s15, [r1, #4]
 80066ae:	e786      	b.n	80065be <__kernel_rem_pio2f+0x3fa>
 80066b0:	aa2e      	add	r2, sp, #184	; 0xb8
 80066b2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80066b6:	ed91 7a00 	vldr	s14, [r1]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066c0:	e783      	b.n	80065ca <__kernel_rem_pio2f+0x406>
 80066c2:	eef1 6a66 	vneg.f32	s13, s13
 80066c6:	eeb1 7a47 	vneg.f32	s14, s14
 80066ca:	edc5 6a00 	vstr	s13, [r5]
 80066ce:	ed85 7a01 	vstr	s14, [r5, #4]
 80066d2:	eef1 7a67 	vneg.f32	s15, s15
 80066d6:	e785      	b.n	80065e4 <__kernel_rem_pio2f+0x420>

080066d8 <__kernel_sinf>:
 80066d8:	ee10 3a10 	vmov	r3, s0
 80066dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80066e4:	da04      	bge.n	80066f0 <__kernel_sinf+0x18>
 80066e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80066ea:	ee17 3a90 	vmov	r3, s15
 80066ee:	b35b      	cbz	r3, 8006748 <__kernel_sinf+0x70>
 80066f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80066f4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800674c <__kernel_sinf+0x74>
 80066f8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006750 <__kernel_sinf+0x78>
 80066fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006700:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006754 <__kernel_sinf+0x7c>
 8006704:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006708:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006758 <__kernel_sinf+0x80>
 800670c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006710:	eddf 7a12 	vldr	s15, [pc, #72]	; 800675c <__kernel_sinf+0x84>
 8006714:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006718:	eee6 7a07 	vfma.f32	s15, s12, s14
 800671c:	b930      	cbnz	r0, 800672c <__kernel_sinf+0x54>
 800671e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006760 <__kernel_sinf+0x88>
 8006722:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006726:	eea6 0a26 	vfma.f32	s0, s12, s13
 800672a:	4770      	bx	lr
 800672c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006730:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006734:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006738:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800673c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006764 <__kernel_sinf+0x8c>
 8006740:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006744:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	2f2ec9d3 	.word	0x2f2ec9d3
 8006750:	b2d72f34 	.word	0xb2d72f34
 8006754:	3638ef1b 	.word	0x3638ef1b
 8006758:	b9500d01 	.word	0xb9500d01
 800675c:	3c088889 	.word	0x3c088889
 8006760:	be2aaaab 	.word	0xbe2aaaab
 8006764:	3e2aaaab 	.word	0x3e2aaaab

08006768 <fabsf>:
 8006768:	ee10 3a10 	vmov	r3, s0
 800676c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006770:	ee00 3a10 	vmov	s0, r3
 8006774:	4770      	bx	lr
	...

08006778 <floorf>:
 8006778:	ee10 3a10 	vmov	r3, s0
 800677c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006780:	3a7f      	subs	r2, #127	; 0x7f
 8006782:	2a16      	cmp	r2, #22
 8006784:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006788:	dc2a      	bgt.n	80067e0 <floorf+0x68>
 800678a:	2a00      	cmp	r2, #0
 800678c:	da11      	bge.n	80067b2 <floorf+0x3a>
 800678e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80067f0 <floorf+0x78>
 8006792:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006796:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	dd05      	ble.n	80067ac <floorf+0x34>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	da23      	bge.n	80067ec <floorf+0x74>
 80067a4:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <floorf+0x7c>)
 80067a6:	2900      	cmp	r1, #0
 80067a8:	bf18      	it	ne
 80067aa:	4613      	movne	r3, r2
 80067ac:	ee00 3a10 	vmov	s0, r3
 80067b0:	4770      	bx	lr
 80067b2:	4911      	ldr	r1, [pc, #68]	; (80067f8 <floorf+0x80>)
 80067b4:	4111      	asrs	r1, r2
 80067b6:	420b      	tst	r3, r1
 80067b8:	d0fa      	beq.n	80067b0 <floorf+0x38>
 80067ba:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80067f0 <floorf+0x78>
 80067be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80067c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ca:	ddef      	ble.n	80067ac <floorf+0x34>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bfbe      	ittt	lt
 80067d0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80067d4:	fa40 f202 	asrlt.w	r2, r0, r2
 80067d8:	189b      	addlt	r3, r3, r2
 80067da:	ea23 0301 	bic.w	r3, r3, r1
 80067de:	e7e5      	b.n	80067ac <floorf+0x34>
 80067e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80067e4:	d3e4      	bcc.n	80067b0 <floorf+0x38>
 80067e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067ea:	4770      	bx	lr
 80067ec:	2300      	movs	r3, #0
 80067ee:	e7dd      	b.n	80067ac <floorf+0x34>
 80067f0:	7149f2ca 	.word	0x7149f2ca
 80067f4:	bf800000 	.word	0xbf800000
 80067f8:	007fffff 	.word	0x007fffff

080067fc <scalbnf>:
 80067fc:	ee10 3a10 	vmov	r3, s0
 8006800:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006804:	d025      	beq.n	8006852 <scalbnf+0x56>
 8006806:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800680a:	d302      	bcc.n	8006812 <scalbnf+0x16>
 800680c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006810:	4770      	bx	lr
 8006812:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006816:	d122      	bne.n	800685e <scalbnf+0x62>
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <scalbnf+0xc8>)
 800681a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80068c8 <scalbnf+0xcc>
 800681e:	4298      	cmp	r0, r3
 8006820:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006824:	db16      	blt.n	8006854 <scalbnf+0x58>
 8006826:	ee10 3a10 	vmov	r3, s0
 800682a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800682e:	3a19      	subs	r2, #25
 8006830:	4402      	add	r2, r0
 8006832:	2afe      	cmp	r2, #254	; 0xfe
 8006834:	dd15      	ble.n	8006862 <scalbnf+0x66>
 8006836:	ee10 3a10 	vmov	r3, s0
 800683a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80068cc <scalbnf+0xd0>
 800683e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80068d0 <scalbnf+0xd4>
 8006842:	2b00      	cmp	r3, #0
 8006844:	eeb0 7a67 	vmov.f32	s14, s15
 8006848:	bfb8      	it	lt
 800684a:	eef0 7a66 	vmovlt.f32	s15, s13
 800684e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006852:	4770      	bx	lr
 8006854:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80068d4 <scalbnf+0xd8>
 8006858:	ee20 0a27 	vmul.f32	s0, s0, s15
 800685c:	4770      	bx	lr
 800685e:	0dd2      	lsrs	r2, r2, #23
 8006860:	e7e6      	b.n	8006830 <scalbnf+0x34>
 8006862:	2a00      	cmp	r2, #0
 8006864:	dd06      	ble.n	8006874 <scalbnf+0x78>
 8006866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800686a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800686e:	ee00 3a10 	vmov	s0, r3
 8006872:	4770      	bx	lr
 8006874:	f112 0f16 	cmn.w	r2, #22
 8006878:	da1a      	bge.n	80068b0 <scalbnf+0xb4>
 800687a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800687e:	4298      	cmp	r0, r3
 8006880:	ee10 3a10 	vmov	r3, s0
 8006884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006888:	dd0a      	ble.n	80068a0 <scalbnf+0xa4>
 800688a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80068cc <scalbnf+0xd0>
 800688e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80068d0 <scalbnf+0xd4>
 8006892:	eef0 7a40 	vmov.f32	s15, s0
 8006896:	2b00      	cmp	r3, #0
 8006898:	bf18      	it	ne
 800689a:	eeb0 0a47 	vmovne.f32	s0, s14
 800689e:	e7db      	b.n	8006858 <scalbnf+0x5c>
 80068a0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80068d4 <scalbnf+0xd8>
 80068a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80068d8 <scalbnf+0xdc>
 80068a8:	eef0 7a40 	vmov.f32	s15, s0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	e7f3      	b.n	8006898 <scalbnf+0x9c>
 80068b0:	3219      	adds	r2, #25
 80068b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80068ba:	eddf 7a08 	vldr	s15, [pc, #32]	; 80068dc <scalbnf+0xe0>
 80068be:	ee07 3a10 	vmov	s14, r3
 80068c2:	e7c4      	b.n	800684e <scalbnf+0x52>
 80068c4:	ffff3cb0 	.word	0xffff3cb0
 80068c8:	4c000000 	.word	0x4c000000
 80068cc:	7149f2ca 	.word	0x7149f2ca
 80068d0:	f149f2ca 	.word	0xf149f2ca
 80068d4:	0da24260 	.word	0x0da24260
 80068d8:	8da24260 	.word	0x8da24260
 80068dc:	33000000 	.word	0x33000000

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
